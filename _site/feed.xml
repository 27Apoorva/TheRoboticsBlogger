<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-06-30T17:02:24+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">The Robotics Space</title><author><name>Apoorva Gupta</name></author><entry><title type="html">Unlocking Enhanced Development Experience: Creating Custom Configurations for VSCode Extensions</title><link href="http://localhost:4000/blog/VS-Code-ROS-Configurations/" rel="alternate" type="text/html" title="Unlocking Enhanced Development Experience: Creating Custom Configurations for VSCode Extensions" /><published>2023-06-26T00:00:00+05:30</published><updated>2023-06-26T00:00:00+05:30</updated><id>http://localhost:4000/blog/VS-Code-ROS-Configurations</id><content type="html" xml:base="http://localhost:4000/blog/VS-Code-ROS-Configurations/">&lt;h1 style=&quot;text-align: center;margin-top:20px;margin-bottom-20px;&quot;&gt;Unlocking Enhanced Development Experience: Creating Custom Configurations for VS Code Extensions&lt;/h1&gt;

&lt;!--excerpt.start--&gt;
&lt;p style=&quot;margin: 20px 3rem;&quot;&gt;  
In the &lt;a href=&quot;https://www.theroboticsspace.com/blog/VS-Code-ROS-Extensions/&quot;&gt;previous blog&lt;/a&gt;, I shared my experience of using VS Code Extensions for ROS development. I also discussed some missing functionalities in the VS Code ROS extension, especially the lack of rosbag interface. Well, I dig deeper and figured out the process of creating custom configurations to perform various tasks, including playing rosbags. 
&lt;/p&gt;
&lt;!--excerpt.end--&gt;

&lt;p style=&quot;margin: 20px 3rem;&quot;&gt;  Foremost, you need to ensure that you have installed the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-iot.vscode-ros&quot;&gt;ROS Extension for VS Code&lt;/a&gt;.  After you have installed the ROS extension, and restarted your VS Code, you will see a &lt;code style=&quot;color:orange&quot;&gt;.vscode&lt;/code&gt; folder in your ROS workspace. This folder primarily consists of the following files:
&lt;img src=&quot;/assets/article6/image1.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          padding: 10px;
          margin-left: auto;
          margin-right: auto;
          width: 30vmax;&quot; /&gt;

  &lt;ul style=&quot;margin: 20px 3rem;padding-left: 0;padding-top: 0;&quot;&gt;
      &lt;li&gt;&lt;i&gt;c_cpp_properties.json&lt;/i&gt;&lt;br /&gt;
      It contains the compiler path, C++ standard, and ROS C++ packages path for Intellisense. This file is created by default.
      &lt;/li&gt;
      &lt;li&gt;&lt;i&gt;settings.json&lt;/i&gt;&lt;br /&gt;
      It contains project-specific settings like ROS distro, ROS setup script path, and path to ROS Python3 packages for Intellisense. This file is created by default.
      &lt;/li&gt;
      &lt;li&gt;&lt;i&gt;launch.json &lt;/i&gt;&lt;br /&gt;
        &lt;ul style=&quot;padding-left: 1;padding-top: 0;&quot;&gt;
          &lt;li&gt;This file is not created by default so, you should create a new file inside &lt;code style=&quot;color:orange&quot;&gt;.vscode&lt;/code&gt; folder and name it &lt;code style=&quot;color:orange&quot;&gt;launch.json&lt;/code&gt;. The file should have the following content in it: 
          &lt;pre&gt;&lt;code class=&quot;language-html line-numbers&quot;&gt;{
  &quot;version&quot;: &quot;0.2.0&quot;,
  &quot;configurations&quot;: [
    
  ]
}&lt;/code&gt;&lt;/pre&gt;
          You can add your custom launch configurations inside the &lt;code style=&quot;color:orange&quot;&gt;configurations&lt;/code&gt; key, separated by commas.
          &lt;/li&gt;
          &lt;li&gt;This file contains debugger settings and helps to specify command-line arguments for debugging. &lt;/li&gt;
          &lt;li&gt;You will mostly use this file for executing launch files with the debugger. &lt;/li&gt;
          &lt;li&gt;You can use the &lt;code style=&quot;color:orange&quot;&gt;start debugging&lt;/code&gt; play button in the &lt;code style=&quot;color:orange&quot;&gt;Run and Debug&lt;/code&gt; section to run the debugging tasks. &lt;/li&gt;
        &lt;/ul&gt;
        &lt;img src=&quot;/assets/article6/image15.gif&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 25vmax;&quot; /&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;i&gt;tasks.json&lt;/i&gt;&lt;br /&gt;
        &lt;ul style=&quot;padding-left: 1;padding-top: 0;&quot;&gt;
          &lt;li&gt;This file is not created by default so, you should create a new file inside the &lt;code style=&quot;color:orange&quot;&gt;.vscode&lt;/code&gt; folder and name it &lt;code style=&quot;color:orange&quot;&gt;tasks.json&lt;/code&gt;. The file should have the following content in it:
          &lt;pre&gt;&lt;code class=&quot;language-html line-numbers&quot;&gt;{
  &quot;version&quot;: &quot;2.0.0&quot;,
  &quot;tasks&quot;: [

  ]
}
&lt;/code&gt;&lt;/pre&gt;
          You can add your custom task configurations inside the &lt;code style=&quot;color:orange&quot;&gt;tasks&lt;/code&gt; key, separated by commas.
          &lt;/li&gt;
          &lt;li&gt;This file can contain custom build commands and arbitrary (non-build related) tasks where multiple tasks are separated by (&lt;code style=&quot;color:orange&quot;&gt;{ }&lt;/code&gt;)  curly brackets. Each task has &lt;code style=&quot;color:orange&quot;&gt;key-value pairs&lt;/code&gt; that include details and the arguments for executing the task. There will be a &lt;code style=&quot;color:orange&quot;&gt;label&lt;/code&gt; keyword in each configuration that will be used as an identifier for each task.
          &lt;/li&gt;
          &lt;li&gt;To run tasks specified inside the &lt;code style=&quot;color:orange&quot;&gt;tasks.json&lt;/code&gt; file in VS Code, use &lt;code style=&quot;color:orange&quot;&gt;(CTRL + Shift + P)&lt;/code&gt; , select &lt;code style=&quot;color:orange&quot;&gt;Tasks: Run Task&lt;/code&gt; and then select the value of the &lt;code style=&quot;color:orange&quot;&gt;label&lt;/code&gt; key to search that particular task and then press &lt;code style=&quot;color:orange&quot;&gt;Enter&lt;/code&gt; to run it.&lt;/li&gt;
        &lt;/ul&gt;
        &lt;img src=&quot;/assets/article6/image16.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 35vmax;&quot; /&gt;
      &lt;/li&gt;
  &lt;/ul&gt;
&lt;/p&gt;

&lt;p style=&quot;margin: 20px 3rem;&quot;&gt;  
Now that you have understood the file system, the following Table of Content provides you with a list of custom configurations. You can copy-paste the configuration inside the specified &lt;code style=&quot;color:orange&quot;&gt;tasks.json&lt;/code&gt; or &lt;code style=&quot;color:orange&quot;&gt;launch.json&lt;/code&gt; files. 
&lt;/p&gt;

&lt;p style=&quot;margin: 20px 3rem;&quot;&gt;  
For ease of understanding, I am going to demonstrate each configuration using an example of a workspace. I am also providing a &lt;a href=&quot;https://github.com/27Apoorva/ros_vscode_config&quot;&gt;GitHub repository&lt;/a&gt; containing the example for you to clone and try out various custom functionalities. 
&lt;/p&gt;

&lt;h2 style=&quot;text-align: left;margin: 20px 3rem;&quot; id=&quot;tableofcontents&quot;&gt;TABLE OF CONTENT&lt;/h2&gt;
&lt;ul style=&quot; margin: 20px 3rem;&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;#envsetupconfig&quot;&gt;ENVIRONMENT SETUP CONFIGURATIONS&lt;/a&gt;&lt;br /&gt;
      &lt;ul style=&quot;list-style-type: square;&quot;&gt;
        &lt;li&gt;&lt;a href=&quot;#createros2packages&quot;&gt;CREATE, BUILD, AND SOURCE ROS 2 PACKAGES&lt;/a&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#ros2bagplay&quot;&gt;ROS 2 BAGS PLAYBACK&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#buildconfig&quot;&gt;BUILD CONFIGURATIONS&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#debugtestconfig&quot;&gt;DEBUG CONFIGURATIONS&lt;/a&gt;&lt;br /&gt;
      &lt;ul style=&quot;list-style-type: square;&quot;&gt;
        &lt;li&gt;&lt;a href=&quot;#debugsinglenode&quot;&gt;Debugging Single ROS Node using Launch file ( Supports C++ and Python nodes)&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&quot;#debugmultiplenodes&quot;&gt;Debugging Multiple ROS Nodes using Launch files (Supports C++ and Python nodes)&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;#unittestconfig&quot;&gt;UNIT TESTS CONFIGURATIONS&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;

&lt;h2 style=&quot;text-align: left;margin: 20px 3rem;&quot; id=&quot;envsetupconfig&quot;&gt;ENVIRONMENT SETUP CONFIGURATIONS&lt;/h2&gt;
&lt;h3 style=&quot;text-align: left;margin: 20px 3rem;&quot; id=&quot;createros2packages&quot;&gt;• CREATE, BUILD, AND SOURCE ROS 2 PACKAGES&lt;/h3&gt;
&lt;p style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;
In ROS 2, you can create packages using two different build types, i.e., &lt;code style=&quot;color:orange&quot;&gt;ament_cmake&lt;/code&gt; and &lt;code style=&quot;color:orange&quot;&gt;ament_python&lt;/code&gt;. You need to specify the build type and additional dependencies while creating a package. After your package is created, you need to build and source the workspace. Instead of typing a bunch of commands one after another in the terminal, you can save yourself some time by copy-pasting the below configurations inside the &lt;code style=&quot;color:orange&quot;&gt;tasks&lt;/code&gt; key, separated by commas in the &lt;code style=&quot;color:orange&quot;&gt;tasks.json&lt;/code&gt; file.
&lt;/p&gt;

&lt;p style=&quot;text-align: center; margin: auto 3rem;&quot;&gt;
&lt;ul style=&quot;margin: 20px 3rem;list-style-type: none;list-style: none;padding-left: 0;&quot;&gt;
  &lt;li&gt;
    &lt;pre&gt;&lt;code class=&quot;language-html line-numbers&quot; style=&quot; margin-right: 20px 3rem;&quot;&gt;{
    &quot;label&quot;: &quot;create-package-cmake&quot;,
    &quot;type&quot;: &quot;shell&quot;,     
    &quot;command&quot;: &quot;source /opt/ros/&amp;lt;your_active_ros2_distro&amp;gt;/setup.bash &amp;amp;&amp;amp; cd ${workspaceFolder}/src/ &amp;amp;&amp;amp; ros2 pkg create &amp;lt;your_new_package_name&amp;gt; --build-type ament_cmake --dependencies rclcpp &amp;amp;&amp;amp; cd .. &amp;amp;&amp;amp; colcon build --symlink-install &amp;amp;&amp;amp; source ${workspaceFolder}/install/setup.bash&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;div style=&quot;text-align: center; margin:0;&quot;&gt;For a C++ package, the build type is specified as ament_cmake&lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p style=&quot;text-align: center; margin: auto 3rem;&quot;&gt;
&lt;ul style=&quot;margin: 20px 3rem;list-style-type: none;list-style: none;padding-left: 0;&quot;&gt;
  &lt;li&gt;
    &lt;pre&gt;&lt;code class=&quot;language-html line-numbers&quot; style=&quot; margin-right: 20px 3rem;&quot;&gt;{
    &quot;label&quot;: &quot;create-package-python&quot;,
    &quot;type&quot;: &quot;shell&quot;,
    &quot;command&quot;: &quot;source /opt/ros/&amp;lt;your_active_ros2_distro&amp;gt;/setup.bash &amp;amp;&amp;amp; cd ${workspaceFolder}/src/ &amp;amp;&amp;amp; ros2 pkg create &amp;lt;your_new_package_name&amp;gt; --build-type ament_python --dependencies rclpy &amp;amp;&amp;amp; cd .. &amp;amp;&amp;amp; colcon build --symlink-install &amp;amp;&amp;amp; source ${workspaceFolder}/install/setup.bash&quot;
}
&lt;/code&gt;&lt;/pre&gt;&lt;div style=&quot;text-align: center; margin:0;&quot;&gt;For a Python package, the build type is specified as ament_python&lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;
Change the &lt;code style=&quot;color:red&quot;&gt;&amp;lt;your_active_ros2_distro&amp;gt;&lt;/code&gt; to your active ROS 2 distro while creating your tasks. &lt;br /&gt;
Now each time, you want to create a new package, change the &lt;code style=&quot;color:red&quot;&gt;&amp;lt;your_new_package_name&amp;gt;&lt;/code&gt; to the name of the new package you want to create. &lt;br /&gt;
Also, you can add more dependencies like std_msgs after &lt;code style=&quot;color:orange&quot;&gt;--dependencies&lt;/code&gt; , if required. &lt;br /&gt;

To run the tasks for package creation, use &lt;code style=&quot;color:orange&quot;&gt;(CTRL + Shift + P)&lt;/code&gt;, select &lt;code style=&quot;color:orange&quot;&gt;Tasks: Run Task&lt;/code&gt; and then select the &lt;code style=&quot;color:orange&quot;&gt;task&lt;/code&gt; from the labels. This will create a new package inside your src folder and then build and source the workspace.  
&lt;img src=&quot;/assets/article6/image3.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          padding: 10px;
          margin-left: auto;
          margin-right: auto;
          width: 55vmax;&quot; /&gt;
&lt;/p&gt;

&lt;h2 style=&quot;text-align: left;margin: 20px 3rem;&quot; id=&quot;ros2bagplay&quot;&gt;ROS 2 BAGS PLAYBACK&lt;/h2&gt;
&lt;p style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;
One of the major shortcomings of the VS Code extension for ROS is that it does not provide any interface for rosbag. A seasoned ROS developer knows how often they need to play rosbag to tune their algorithms.&lt;br /&gt;
But there is a way out. You can create a task by copy-pasting the below configuration inside the &lt;code style=&quot;color:orange&quot;&gt;tasks&lt;/code&gt; key, in your &lt;code style=&quot;color:orange&quot;&gt;tasks.json&lt;/code&gt; file to play rosbag. Just set the path of the bag file at &lt;code style=&quot;color:red&quot;&gt;&amp;lt;set-bag-file-path&amp;gt;&lt;/code&gt;.
&lt;/p&gt;
&lt;ul style=&quot;margin: 20px 3rem;list-style-type: none;list-style: none;padding-left: 0;&quot;&gt;
  &lt;li&gt;
    &lt;pre&gt;&lt;code class=&quot;language-html line-numbers&quot; style=&quot; margin-right: 20px 3rem;&quot;&gt;{
    &quot;label&quot;: &quot;ros-bag-play&quot;,
    &quot;type&quot;: &quot;shell&quot;,
    &quot;command&quot;: &quot;source /opt/ros/&amp;lt;your_active_ros2_distro&amp;gt;/setup.bash &amp;amp;&amp;amp; cd ${workspaceFolder}/src/ &amp;amp;&amp;amp; ros2 bag play &amp;lt;set-bag-file-path&amp;gt;&quot;
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;
Change the &lt;code style=&quot;color:red&quot;&gt;&amp;lt;your_active_ros2_distro&amp;gt;&lt;/code&gt; to your active ROS 2 distro while creating your tasks.&lt;br /&gt;
To run the task for playing the rosbag, use &lt;code style=&quot;color:orange&quot;&gt;(CTRL + Shift + P)&lt;/code&gt;, select &lt;code style=&quot;color:orange&quot;&gt;Tasks: Run Task&lt;/code&gt; and then select the &lt;code style=&quot;color:orange&quot;&gt;ros-bag-play&lt;/code&gt; task. This will start playing the rosbag.
&lt;img src=&quot;/assets/article6/image4.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          padding: 10px;
          margin-left: auto;
          margin-right: auto;
          width: 60vmax;&quot; /&gt;
&lt;/p&gt;

&lt;h2 style=&quot;text-align: left;margin: 20px 3rem;&quot; id=&quot;buildconfig&quot;&gt;BUILD CONFIGURATIONS&lt;/h2&gt;
&lt;p style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;
While building a ROS 2 workspace using &lt;code style=&quot;color:orange&quot;&gt;colcon build&lt;/code&gt;, you might be using a combination of arguments. You can add the most commonly used &lt;code style=&quot;color:orange&quot;&gt;colcon build&lt;/code&gt; commands as configurations inside the &lt;code style=&quot;color:orange&quot;&gt;tasks&lt;/code&gt; key in your &lt;code style=&quot;color:orange&quot;&gt;tasks.json&lt;/code&gt; file and execute the build using VS Code.

&lt;ul style=&quot;margin: 20px 3rem;&quot;&gt;
      &lt;li&gt;colcon build&lt;br /&gt;
        This will build the workspace using colcon build.
            &lt;pre&gt;&lt;code class=&quot;language-html line-numbers&quot;&gt;{
  &quot;type&quot;: &quot;colcon&quot;,
  &quot;args&quot;: [
      &quot;build&quot;,
  ],
  &quot;problemMatcher&quot;: [
      &quot;$catkin-gcc&quot;
  ],
  &quot;group&quot;: &quot;build&quot;,
  &quot;label&quot;: &quot;colcon build&quot;
}&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
      &lt;li&gt;colcon build –symlink-install&lt;br /&gt;
        This creates symlink of the executables instead of copying files from the source and build directories where possible. This is especially useful for Python nodes. 
            &lt;pre&gt;&lt;code class=&quot;language-html line-numbers&quot;&gt;{
  &quot;type&quot;: &quot;colcon&quot;,
  &quot;args&quot;: [
      &quot;build&quot;,
      &quot;--symlink-install&quot;,
  ],
  &quot;problemMatcher&quot;: [
      &quot;$catkin-gcc&quot;
  ],
  &quot;group&quot;: &quot;build&quot;,
  &quot;label&quot;: &quot;colcon build --symlink-install&quot;
}&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
      &lt;li&gt;colcon build --merge-install&lt;br /&gt;
        Use &lt;code style=&quot;color:orange&quot;&gt;${workspace}/install&lt;/code&gt; as a prefix for all packages instead of a package specific subdirectory in the install base.
            &lt;pre&gt;&lt;code class=&quot;language-html line-numbers&quot;&gt;{
  &quot;type&quot;: &quot;colcon&quot;,
  &quot;args&quot;: [
      &quot;build&quot;,
      &quot;--merge--install&quot;,
  ],
  &quot;problemMatcher&quot;: [
      &quot;$catkin-gcc&quot;
  ],
  &quot;group&quot;: &quot;build&quot;,
  &quot;label&quot;: &quot;colcon build --merge--install&quot;
}&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
      &lt;li&gt;colcon build --packages-select &lt;br /&gt;
        You can build a selected number of packages inside your workspace by specifying the packages (separated by space)  name after the &lt;code style=&quot;color:orange&quot;&gt;--packages-select&lt;/code&gt; argument. 
            &lt;pre&gt;&lt;code class=&quot;language-html line-numbers&quot;&gt;{
  &quot;type&quot;: &quot;colcon&quot;,
  &quot;args&quot;: [
    &quot;build&quot;,
    &quot;--packages-select&quot;,
    &quot;&amp;lt;specify_packages_name_here&amp;gt;&quot;,
  ],
  &quot;problemMatcher&quot;: [
    &quot;$catkin-gcc&quot;
  ],
  &quot;group&quot;: &quot;build&quot;,
  &quot;label&quot;: &quot;colcon build --packages-select&quot;
}&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
      &lt;li&gt;colcon build (multiple arguments)&lt;br /&gt;
        You can use multiple arguments with &lt;code style=&quot;color:orange&quot;&gt;colcon build&lt;/code&gt; by specifying the arguments inside the &lt;code style=&quot;color:orange&quot;&gt;args&lt;/code&gt; key in the configuration. &lt;br /&gt;
        In the below configuration, you can execute two arguments together that will build a selected number of packages inside your workspace by specifying the packages names (separated by space) after the &lt;code style=&quot;color:orange&quot;&gt;--packages-select&lt;/code&gt; argument and also create symlinks. 
            &lt;pre&gt;&lt;code class=&quot;language-html line-numbers&quot;&gt;{
  &quot;type&quot;: &quot;colcon&quot;,
  &quot;args&quot;: [
    &quot;build&quot;,
    &quot;--symlink-install&quot;,
    &quot;--packages-select&quot;,
    &quot;&amp;lt;specify_packages_name_here&amp;gt;&quot;,
  ],
  &quot;problemMatcher&quot;: [
    &quot;$catkin-gcc&quot;
  ],
  &quot;group&quot;: &quot;build&quot;,
  &quot;label&quot;: &quot;colcon build custom 1&quot;
}&lt;/code&gt;&lt;/pre&gt;
        The below configuration builds the workspace by creating symlinks and aborts the build process after it gets the first package with any errors.
            &lt;pre&gt;&lt;code class=&quot;language-html line-numbers&quot;&gt;{
  &quot;type&quot;: &quot;colcon&quot;,
  &quot;args&quot;: [
    &quot;build&quot;,
    &quot;--symlink-install&quot;,
    &quot;--abort-on-error&quot;,
  ],
  &quot;problemMatcher&quot;: [
    &quot;$catkin-gcc&quot;
  ],
  &quot;group&quot;: &quot;build&quot;,
  &quot;label&quot;: &quot;colcon build custom 2&quot;
}&lt;/code&gt;&lt;/pre&gt;
      &lt;/li&gt;
  &lt;/ul&gt;
&lt;/p&gt;

&lt;p style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;
To run the different colcon build tasks, use &lt;code style=&quot;color:orange&quot;&gt;(CTRL + Shift + P)&lt;/code&gt;, select &lt;code style=&quot;color:orange&quot;&gt;Tasks: Run Task&lt;/code&gt; and then select the &lt;code style=&quot;color:orange&quot;&gt;build task&lt;/code&gt; from the available options.
&lt;img src=&quot;/assets/article6/image5.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          padding: 10px;
          margin-left: auto;
          margin-right: auto;
          width: 60vmax;&quot; /&gt;
&lt;/p&gt;

&lt;h2 style=&quot;text-align: left;margin: 20px 3rem;&quot; id=&quot;debugtestconfig&quot;&gt;DEBUG CONFIGURATIONS&lt;/h2&gt;
&lt;p style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;
Debugging the code you have written is one of the toughest places to be, especially when there is a segmentation fault. While the initial stage of debugging will begin with using &lt;code style=&quot;color:orange&quot;&gt;ROS Loggers&lt;/code&gt; and &lt;code style=&quot;color:orange&quot;&gt;RViz&lt;/code&gt;, using debuggers like &lt;code style=&quot;color:orange&quot;&gt;GDB&lt;/code&gt; for C++ and &lt;code style=&quot;color:orange&quot;&gt;PDB&lt;/code&gt; for Python is essential during code crashes or while dealing with an unknown error.&lt;br /&gt;
By using a debugger, you can control the flow of execution line by line and have a peek at variables of interest.  
  &lt;ul style=&quot;list-style-type: none;list-style: none;padding-left: 0;margin: 20px 3rem;&quot;&gt;
    &lt;li id=&quot;debugsinglenode&quot;&gt;&lt;b&gt;• Debugging single ROS node using Launch file (Supports C++ and Python nodes)&lt;/b&gt;
      &lt;ul style=&quot;padding-left: 1;&quot;&gt;
        &lt;li&gt;The following is an example of a launch file for package name &lt;code style=&quot;color:orange&quot;&gt;ros2_cpp_pkg&lt;/code&gt; that launches a single C++ node called &lt;code style=&quot;color:orange&quot;&gt;publisher&lt;/code&gt;. The executables in the launch file can be either C++ or Python.&lt;/li&gt;
        &lt;img src=&quot;/assets/article6/image6.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 35vmax;&quot; /&gt;
        &lt;li&gt;Go to the &lt;code style=&quot;color:orange&quot;&gt;Run and Debug Tab&lt;/code&gt; on the left sidebar of VS Code and then click on &lt;code style=&quot;color:orange&quot;&gt;create a launch.json file&lt;/code&gt; -&amp;gt; &lt;code style=&quot;color:orange&quot;&gt;ROS&lt;/code&gt; -&amp;gt; &lt;code style=&quot;color:orange&quot;&gt;ROS: Launch&lt;/code&gt; -&amp;gt; &lt;code style=&quot;color:orange&quot;&gt;Choose a ROS package&lt;/code&gt; -&amp;gt; &lt;code style=&quot;color:orange&quot;&gt;Choose a ROS launch file&lt;/code&gt; created in the previous step. This step will add the location of the launch file from inside the &lt;code style=&quot;color:orange&quot;&gt;install&lt;/code&gt; folder in your workspace. &lt;/li&gt;
        &lt;img src=&quot;/assets/article6/image7.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 50vmax;&quot; /&gt;
        &lt;li&gt;A new &lt;code style=&quot;color:orange&quot;&gt;.vscode/launch.json&lt;/code&gt; file will be created containing the configuration for the launch file as a target. If you created a &lt;code style=&quot;color:orange&quot;&gt;launch.json&lt;/code&gt; file before, you can add the following launch configuration in the &lt;code style=&quot;color:orange&quot;&gt;configurations&lt;/code&gt; key. 
        &lt;/li&gt;
            &lt;pre&gt;&lt;code class=&quot;language-html line-numbers&quot; style=&quot;margin-right: 20px 3rem;&quot;&gt;{ 
  &quot;name&quot;: &quot;ROS: Launch&quot;,
  &quot;request&quot;: &quot;launch&quot;,
  &quot;target&quot;: &quot;&amp;lt;launch_file_location _inside_install_folder&amp;gt;&quot;,
  &quot;launch&quot;: [&quot;rviz&quot;, &quot;gz&quot;,&quot;gzclient&quot;,&quot;gzserver&quot;],
  &quot;type&quot;: &quot;ros&quot;
}&lt;/code&gt;&lt;/pre&gt;
        Add the name and location of the launch file from inside the &lt;code style=&quot;color:orange&quot;&gt;install&lt;/code&gt; folder in your workspace at &lt;code style=&quot;color:red&quot;&gt;&amp;lt;launch_file_location _inside_install_folder&amp;gt;&lt;/code&gt;. An example of a launch file inside your install folder would be &lt;code style=&quot;color:red&quot;&gt;&amp;lt;workspace_folder&amp;gt; /install/&amp;lt;package_name&amp;gt;/share/&amp;lt;package_name&amp;gt;/launch/&amp;lt;.py_launch_file_name&amp;gt;&lt;/code&gt;.
        &lt;img src=&quot;/assets/article6/image17.gif&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 20vmax;&quot; /&gt;
        &lt;li&gt;Go to the C++/Python code for the executable specified in the launch file and place a &lt;code style=&quot;color:orange&quot;&gt;breakpoint&lt;/code&gt; in the file.&lt;/li&gt;
        &lt;img src=&quot;/assets/article6/image8.gif&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 30vmax;&quot; /&gt;
        &lt;li&gt;Now go to the &lt;code style=&quot;color:orange&quot;&gt;Run and Debug Tab&lt;/code&gt; on the left sidebar of VS Code , select the launch configuration from the top drop down menu and click the &lt;code style=&quot;color:orange&quot;&gt;Play&lt;/code&gt; button to begin debugging.&lt;/li&gt;
        &lt;img src=&quot;/assets/article6/image9.gif&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 30vmax;&quot; /&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li id=&quot;debugmultiplenodes&quot;&gt;&lt;b&gt;• Debugging Multiple ROS Nodes using Launch files (Supports C++ and Python nodes)&lt;/b&gt;
      &lt;ul style=&quot;padding-left: 1;&quot;&gt;
        &lt;li&gt;The following is an example of a launch file that consists of two nodes named &lt;code style=&quot;color:orange&quot;&gt;talker_node&lt;/code&gt; and &lt;code style=&quot;color:orange&quot;&gt;listener&lt;/code&gt; node. The launch file can have either C++ and/or Python nodes.&lt;/li&gt;
        &lt;img src=&quot;/assets/article6/image10.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 35vmax;&quot; /&gt;
        &lt;li&gt;Add the following configuration in the &lt;code style=&quot;color:orange&quot;&gt;configurations&lt;/code&gt; key to your &lt;code style=&quot;color:orange&quot;&gt;launch.json&lt;/code&gt; file. Add the name and location of the launch file from inside the &lt;code style=&quot;color:orange&quot;&gt;install&lt;/code&gt; folder in your workspace at &lt;code style=&quot;color:red&quot;&gt;&amp;lt;launch_file_location _inside_install_folder&amp;gt;&lt;/code&gt;.
            &lt;pre&gt;&lt;code class=&quot;language-html line-numbers&quot; style=&quot;margin-right: 20px 3rem;&quot;&gt;{
  &quot;name&quot;: &quot;ROS: Launch Multiple&quot;,
  &quot;request&quot;: &quot;launch&quot;,
  &quot;target&quot;: &quot;&amp;lt;launch_file_location_inside_install_folder&amp;gt;&quot;,
  &quot;launch&quot;: [&quot;rviz&quot;, &quot;gz&quot;,&quot;gzclient&quot;,&quot;gzserver&quot;],
  &quot;type&quot;: &quot;ros&quot;
}
&lt;/code&gt;&lt;/pre&gt;
        &lt;/li&gt;
        &lt;li&gt;Go to the C++/Python code for the executables specified in the launch file and place a &lt;code style=&quot;color:orange&quot;&gt;breakpoint&lt;/code&gt; in the required files.&lt;/li&gt;
        &lt;img src=&quot;/assets/article6/image11.gif&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 30vmax;&quot; /&gt;
        &lt;li&gt;Now go to the &lt;code style=&quot;color:orange&quot;&gt;Run and Debug Tab&lt;/code&gt; on the left sidebar of VS Code , select the launch configuration from the top drop-down menu and click the &lt;code style=&quot;color:orange&quot;&gt;Play&lt;/code&gt; button to begin debugging.&lt;/li&gt;
        &lt;img src=&quot;/assets/article6/image12.gif&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 30vmax;&quot; /&gt;
        &lt;li&gt;You can switch between different executables from the &lt;code style=&quot;color:orange&quot;&gt;debugger menu&lt;/code&gt;.&lt;/li&gt;
        &lt;img src=&quot;/assets/article6/image133.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 30vmax;&quot; /&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/p&gt;

&lt;h3 style=&quot;text-align: left;margin: 20px 3rem;&quot; id=&quot;unittestconfig&quot;&gt;UNIT TEST CONFIGURATIONS&lt;/h3&gt;
&lt;p style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;
I can’t stress enough on the &lt;a href=&quot;https://docs.ros.org/en/iron/Tutorials/Intermediate/Testing/Testing-Main.html&quot;&gt;importance of unit testing&lt;/a&gt; for a stable software release process and code maintenance. &lt;br /&gt;
ROS 2 provides &lt;a href=&quot;https://docs.ros.org/en/humble/Tutorials/Intermediate/Testing/Cpp.html&quot;&gt;gtest&lt;/a&gt; for testing C++ nodes and &lt;a href=&quot;https://docs.ros.org/en/humble/Tutorials/Intermediate/Testing/Python.html&quot;&gt;pytest&lt;/a&gt; for testing Python nodes. colcon provides macros for test-aware compilation and verbs dedicated to testing the project in its entirety. You can execute &lt;code style=&quot;color:orange&quot;&gt;colcon test&lt;/code&gt; to run your unit tests. The test files are generally stored inside a &lt;code style=&quot;color:orange&quot;&gt;tests&lt;/code&gt; folder.&lt;br /&gt;
To execute the unit tests for a particular package using &lt;code style=&quot;color:orange&quot;&gt;colcon test&lt;/code&gt; command, give the &lt;code style=&quot;color:orange&quot;&gt;test&lt;/code&gt; folder name and the name of the package at &lt;code style=&quot;color:red&quot;&gt;&amp;lt;specify_package_name_here&amp;gt;&lt;/code&gt; after &lt;code style=&quot;color:orange&quot;&gt;--packages-select&lt;/code&gt; argument. &lt;br /&gt;
&lt;ul style=&quot;margin: 20px 3rem;list-style-type: none;list-style: none;padding-left: 0;&quot;&gt;
  &lt;li&gt;
    &lt;pre&gt;&lt;code class=&quot;language-html line-numbers&quot; style=&quot; margin-right: 20px 3rem;&quot;&gt;{
  &quot;type&quot;: &quot;colcon&quot;,
  &quot;args&quot;: [
    &quot;test&quot;,
    &quot;--ctest-args&quot;,
    “test”,
    &quot;--packages-select&quot;,
    “&amp;lt;specify_package_name_here&amp;gt;”,
  ],
  &quot;problemMatcher&quot;: [
    &quot;$catkin-gcc&quot;
  ],
  &quot;group&quot;: &quot;build&quot;,
  &quot;label&quot;: &quot;colcon_test&quot;
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;p style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;
Testing with pytest framework, you can specify the name of the test function at &lt;code style=&quot;color:red&quot;&gt;&amp;lt;specify_name_of_ specific_test_function&amp;gt;&lt;/code&gt;  you created with the &lt;code style=&quot;color:orange&quot;&gt;colcon test&lt;/code&gt; command to test for that specific test function after &lt;code style=&quot;color:orange&quot;&gt;--pytest-args&lt;/code&gt; argument. 
&lt;ul style=&quot;margin: 20px 3rem;list-style-type: none;list-style: none;padding-left: 0;&quot;&gt;
  &lt;li&gt;
    &lt;pre&gt;&lt;code class=&quot;language-html line-numbers&quot; style=&quot; margin-right: 20px 3rem;&quot;&gt;{
  &quot;type&quot;: &quot;colcon&quot;,
  &quot;args&quot;: [
    &quot;test&quot;,
    &quot;--packages-select&quot;,
    “&amp;lt;specify_packages_name_here&amp;gt;”,
    &quot;--pytest-args&quot;,
    &quot;-k&quot;,
    &quot;&amp;lt;specify_name_of_specific_test_function&amp;gt;&quot;,
  ],
  &quot;problemMatcher&quot;: [
    &quot;$catkin-gcc&quot;
  ],
  &quot;group&quot;: &quot;build&quot;,
  &quot;label&quot;: &quot;colcon_pytest&quot;
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;
To run the different colcon test tasks, use &lt;code style=&quot;color:orange&quot;&gt;(CTRL + Shift + P)&lt;/code&gt;, select &lt;code style=&quot;color:orange&quot;&gt;Tasks: Run Task&lt;/code&gt; and then select the &lt;code style=&quot;color:orange&quot;&gt;test task&lt;/code&gt; from the available options.
&lt;img src=&quot;/assets/article6/image144.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          padding: 10px;
          margin-left: auto;
          margin-right: auto;
          width: 50vmax;&quot; /&gt;
&lt;/p&gt;

&lt;p style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;
Using a debugger with ROS 2 launch_test using the ROS Extension for VS Code is an active problem and has an &lt;a href=&quot;https://github.com/ms-iot/vscode-ros/issues/891&quot;&gt;open issue&lt;/a&gt; at the official GitHub repository.
&lt;/p&gt;

&lt;h3 style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;
By leveraging the power of VS Code and ROS extension, developers can streamline their coding process, improve productivity, and gain more control over their ROS projects. Whether it&apos;s setting up a ROS workspace, configuring build tasks, or utilizing ROS-specific features, understanding these configurations opens up new possibilities for efficient and effective ROS development. &lt;br /&gt;
As mentioned previously, you can find the entire configurations from my &lt;a href=&quot;https://github.com/27Apoorva/ros_vscode_config&quot;&gt;GitHub repository&lt;/a&gt;. &lt;br /&gt;
If you want to create a custom configuration, feel free to open a pull request in the &lt;a href=&quot;https://github.com/27Apoorva/ros_vscode_config&quot;&gt;GitHub repository&lt;/a&gt;. You can also create a Feature Request if you want me to implement your ideas. &lt;br /&gt;
Embracing these configurations will undoubtedly empower ROS developers to unleash their full potential and embark on successful robotics projects using the VS Code ecosystem.
&lt;/p&gt;

&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;If you liked the article, please buy me a &lt;a style=&quot;
                    text-decoration:none;
                    display: inline-block;
                    outline: 0;
                    cursor: pointer;
                    text-align: center;
                    border: 0;
                    padding: 7px 16px;
                    min-height: 36px;
                    min-width: 36px;
                    color: #ffffff;
                    background: #11999e;
                    border-radius: 4px;
                    font-weight: 500;
                    font-size: 18px;
                    box-shadow: rgba(0, 0, 0, 0.05) 0px 1px 0px 0px, rgba(0, 0, 0, 0.2) 0px -1px 0px 0px inset;
                    :hover {
                        background: #006e52;
                    }
                &quot; href=&quot;https://www.buymeacoffee.com/roboticsspace&quot;&gt;☕️ coffee&lt;/a&gt;&lt;/p&gt;

&lt;h3 style=&quot; margin: 20px 3rem;&quot;&gt;Resources:&lt;/h3&gt;
&lt;ul style=&quot; margin: 20px 3rem;&quot;&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://github.com/ms-iot/vscode-ros/blob/master/doc/debug-support.md&quot;&gt;Debug ROS Nodes&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://medium.com/@vasank1958/debugging-ros-node-with-vs-code-a735106c4f9a&quot;&gt;Debugging ROS Node with VS-Code.&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://medium.com/@tahsincankose/a-decent-integration-of-vscode-to-ros-4c1d951c982a&quot;&gt;A Decent Integration of VSCode to ROS&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://code.visualstudio.com/docs/editor/debugging&quot;&gt;Debugging in VS Code&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://code.visualstudio.com/docs/editor/tasks&quot;&gt;Tasks in Visual Studio Code&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;</content><author><name>Apoorva Gupta</name></author><category term="Blog" /><category term="Post Formats" /><category term="readability" /><category term="standard" /><summary type="html">Unlocking Enhanced Development Experience: Creating Custom Configurations for VS Code Extensions In the previous blog, I shared my experience of using VS Code Extensions for ROS development. I also discussed some missing functionalities in the VS Code ROS extension, especially the lack of rosbag interface. Well, I dig deeper and figured out the process of creating custom configurations to perform various tasks, including playing rosbags. Foremost, you need to ensure that you have installed the ROS Extension for VS Code. After you have installed the ROS extension, and restarted your VS Code, you will see a .vscode folder in your ROS workspace. This folder primarily consists of the following files: c_cpp_properties.json It contains the compiler path, C++ standard, and ROS C++ packages path for Intellisense. This file is created by default. settings.json It contains project-specific settings like ROS distro, ROS setup script path, and path to ROS Python3 packages for Intellisense. This file is created by default. launch.json This file is not created by default so, you should create a new file inside .vscode folder and name it launch.json. The file should have the following content in it: { &quot;version&quot;: &quot;0.2.0&quot;, &quot;configurations&quot;: [ ] } You can add your custom launch configurations inside the configurations key, separated by commas. This file contains debugger settings and helps to specify command-line arguments for debugging. You will mostly use this file for executing launch files with the debugger. You can use the start debugging play button in the Run and Debug section to run the debugging tasks. tasks.json This file is not created by default so, you should create a new file inside the .vscode folder and name it tasks.json. The file should have the following content in it: { &quot;version&quot;: &quot;2.0.0&quot;, &quot;tasks&quot;: [ ] } You can add your custom task configurations inside the tasks key, separated by commas. This file can contain custom build commands and arbitrary (non-build related) tasks where multiple tasks are separated by ({ }) curly brackets. Each task has key-value pairs that include details and the arguments for executing the task. There will be a label keyword in each configuration that will be used as an identifier for each task. To run tasks specified inside the tasks.json file in VS Code, use (CTRL + Shift + P) , select Tasks: Run Task and then select the value of the label key to search that particular task and then press Enter to run it. Now that you have understood the file system, the following Table of Content provides you with a list of custom configurations. You can copy-paste the configuration inside the specified tasks.json or launch.json files. For ease of understanding, I am going to demonstrate each configuration using an example of a workspace. I am also providing a GitHub repository containing the example for you to clone and try out various custom functionalities. TABLE OF CONTENT ENVIRONMENT SETUP CONFIGURATIONS CREATE, BUILD, AND SOURCE ROS 2 PACKAGES ROS 2 BAGS PLAYBACK BUILD CONFIGURATIONS DEBUG CONFIGURATIONS Debugging Single ROS Node using Launch file ( Supports C++ and Python nodes) Debugging Multiple ROS Nodes using Launch files (Supports C++ and Python nodes) UNIT TESTS CONFIGURATIONS ENVIRONMENT SETUP CONFIGURATIONS • CREATE, BUILD, AND SOURCE ROS 2 PACKAGES In ROS 2, you can create packages using two different build types, i.e., ament_cmake and ament_python. You need to specify the build type and additional dependencies while creating a package. After your package is created, you need to build and source the workspace. Instead of typing a bunch of commands one after another in the terminal, you can save yourself some time by copy-pasting the below configurations inside the tasks key, separated by commas in the tasks.json file. { &quot;label&quot;: &quot;create-package-cmake&quot;, &quot;type&quot;: &quot;shell&quot;, &quot;command&quot;: &quot;source /opt/ros/&amp;lt;your_active_ros2_distro&amp;gt;/setup.bash &amp;amp;&amp;amp; cd ${workspaceFolder}/src/ &amp;amp;&amp;amp; ros2 pkg create &amp;lt;your_new_package_name&amp;gt; --build-type ament_cmake --dependencies rclcpp &amp;amp;&amp;amp; cd .. &amp;amp;&amp;amp; colcon build --symlink-install &amp;amp;&amp;amp; source ${workspaceFolder}/install/setup.bash&quot; } For a C++ package, the build type is specified as ament_cmake { &quot;label&quot;: &quot;create-package-python&quot;, &quot;type&quot;: &quot;shell&quot;, &quot;command&quot;: &quot;source /opt/ros/&amp;lt;your_active_ros2_distro&amp;gt;/setup.bash &amp;amp;&amp;amp; cd ${workspaceFolder}/src/ &amp;amp;&amp;amp; ros2 pkg create &amp;lt;your_new_package_name&amp;gt; --build-type ament_python --dependencies rclpy &amp;amp;&amp;amp; cd .. &amp;amp;&amp;amp; colcon build --symlink-install &amp;amp;&amp;amp; source ${workspaceFolder}/install/setup.bash&quot; } For a Python package, the build type is specified as ament_python Change the &amp;lt;your_active_ros2_distro&amp;gt; to your active ROS 2 distro while creating your tasks. Now each time, you want to create a new package, change the &amp;lt;your_new_package_name&amp;gt; to the name of the new package you want to create. Also, you can add more dependencies like std_msgs after --dependencies , if required. To run the tasks for package creation, use (CTRL + Shift + P), select Tasks: Run Task and then select the task from the labels. This will create a new package inside your src folder and then build and source the workspace. ROS 2 BAGS PLAYBACK One of the major shortcomings of the VS Code extension for ROS is that it does not provide any interface for rosbag. A seasoned ROS developer knows how often they need to play rosbag to tune their algorithms. But there is a way out. You can create a task by copy-pasting the below configuration inside the tasks key, in your tasks.json file to play rosbag. Just set the path of the bag file at &amp;lt;set-bag-file-path&amp;gt;. { &quot;label&quot;: &quot;ros-bag-play&quot;, &quot;type&quot;: &quot;shell&quot;, &quot;command&quot;: &quot;source /opt/ros/&amp;lt;your_active_ros2_distro&amp;gt;/setup.bash &amp;amp;&amp;amp; cd ${workspaceFolder}/src/ &amp;amp;&amp;amp; ros2 bag play &amp;lt;set-bag-file-path&amp;gt;&quot; } Change the &amp;lt;your_active_ros2_distro&amp;gt; to your active ROS 2 distro while creating your tasks. To run the task for playing the rosbag, use (CTRL + Shift + P), select Tasks: Run Task and then select the ros-bag-play task. This will start playing the rosbag. BUILD CONFIGURATIONS While building a ROS 2 workspace using colcon build, you might be using a combination of arguments. You can add the most commonly used colcon build commands as configurations inside the tasks key in your tasks.json file and execute the build using VS Code. colcon build This will build the workspace using colcon build. { &quot;type&quot;: &quot;colcon&quot;, &quot;args&quot;: [ &quot;build&quot;, ], &quot;problemMatcher&quot;: [ &quot;$catkin-gcc&quot; ], &quot;group&quot;: &quot;build&quot;, &quot;label&quot;: &quot;colcon build&quot; } colcon build –symlink-install This creates symlink of the executables instead of copying files from the source and build directories where possible. This is especially useful for Python nodes. { &quot;type&quot;: &quot;colcon&quot;, &quot;args&quot;: [ &quot;build&quot;, &quot;--symlink-install&quot;, ], &quot;problemMatcher&quot;: [ &quot;$catkin-gcc&quot; ], &quot;group&quot;: &quot;build&quot;, &quot;label&quot;: &quot;colcon build --symlink-install&quot; } colcon build --merge-install Use ${workspace}/install as a prefix for all packages instead of a package specific subdirectory in the install base. { &quot;type&quot;: &quot;colcon&quot;, &quot;args&quot;: [ &quot;build&quot;, &quot;--merge--install&quot;, ], &quot;problemMatcher&quot;: [ &quot;$catkin-gcc&quot; ], &quot;group&quot;: &quot;build&quot;, &quot;label&quot;: &quot;colcon build --merge--install&quot; } colcon build --packages-select You can build a selected number of packages inside your workspace by specifying the packages (separated by space) name after the --packages-select argument. { &quot;type&quot;: &quot;colcon&quot;, &quot;args&quot;: [ &quot;build&quot;, &quot;--packages-select&quot;, &quot;&amp;lt;specify_packages_name_here&amp;gt;&quot;, ], &quot;problemMatcher&quot;: [ &quot;$catkin-gcc&quot; ], &quot;group&quot;: &quot;build&quot;, &quot;label&quot;: &quot;colcon build --packages-select&quot; } colcon build (multiple arguments) You can use multiple arguments with colcon build by specifying the arguments inside the args key in the configuration. In the below configuration, you can execute two arguments together that will build a selected number of packages inside your workspace by specifying the packages names (separated by space) after the --packages-select argument and also create symlinks. { &quot;type&quot;: &quot;colcon&quot;, &quot;args&quot;: [ &quot;build&quot;, &quot;--symlink-install&quot;, &quot;--packages-select&quot;, &quot;&amp;lt;specify_packages_name_here&amp;gt;&quot;, ], &quot;problemMatcher&quot;: [ &quot;$catkin-gcc&quot; ], &quot;group&quot;: &quot;build&quot;, &quot;label&quot;: &quot;colcon build custom 1&quot; } The below configuration builds the workspace by creating symlinks and aborts the build process after it gets the first package with any errors. { &quot;type&quot;: &quot;colcon&quot;, &quot;args&quot;: [ &quot;build&quot;, &quot;--symlink-install&quot;, &quot;--abort-on-error&quot;, ], &quot;problemMatcher&quot;: [ &quot;$catkin-gcc&quot; ], &quot;group&quot;: &quot;build&quot;, &quot;label&quot;: &quot;colcon build custom 2&quot; } To run the different colcon build tasks, use (CTRL + Shift + P), select Tasks: Run Task and then select the build task from the available options. DEBUG CONFIGURATIONS Debugging the code you have written is one of the toughest places to be, especially when there is a segmentation fault. While the initial stage of debugging will begin with using ROS Loggers and RViz, using debuggers like GDB for C++ and PDB for Python is essential during code crashes or while dealing with an unknown error. By using a debugger, you can control the flow of execution line by line and have a peek at variables of interest. • Debugging single ROS node using Launch file (Supports C++ and Python nodes) The following is an example of a launch file for package name ros2_cpp_pkg that launches a single C++ node called publisher. The executables in the launch file can be either C++ or Python. Go to the Run and Debug Tab on the left sidebar of VS Code and then click on create a launch.json file -&amp;gt; ROS -&amp;gt; ROS: Launch -&amp;gt; Choose a ROS package -&amp;gt; Choose a ROS launch file created in the previous step. This step will add the location of the launch file from inside the install folder in your workspace. A new .vscode/launch.json file will be created containing the configuration for the launch file as a target. If you created a launch.json file before, you can add the following launch configuration in the configurations key. { &quot;name&quot;: &quot;ROS: Launch&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;target&quot;: &quot;&amp;lt;launch_file_location _inside_install_folder&amp;gt;&quot;, &quot;launch&quot;: [&quot;rviz&quot;, &quot;gz&quot;,&quot;gzclient&quot;,&quot;gzserver&quot;], &quot;type&quot;: &quot;ros&quot; } Add the name and location of the launch file from inside the install folder in your workspace at &amp;lt;launch_file_location _inside_install_folder&amp;gt;. An example of a launch file inside your install folder would be &amp;lt;workspace_folder&amp;gt; /install/&amp;lt;package_name&amp;gt;/share/&amp;lt;package_name&amp;gt;/launch/&amp;lt;.py_launch_file_name&amp;gt;. Go to the C++/Python code for the executable specified in the launch file and place a breakpoint in the file. Now go to the Run and Debug Tab on the left sidebar of VS Code , select the launch configuration from the top drop down menu and click the Play button to begin debugging. • Debugging Multiple ROS Nodes using Launch files (Supports C++ and Python nodes) The following is an example of a launch file that consists of two nodes named talker_node and listener node. The launch file can have either C++ and/or Python nodes. Add the following configuration in the configurations key to your launch.json file. Add the name and location of the launch file from inside the install folder in your workspace at &amp;lt;launch_file_location _inside_install_folder&amp;gt;. { &quot;name&quot;: &quot;ROS: Launch Multiple&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;target&quot;: &quot;&amp;lt;launch_file_location_inside_install_folder&amp;gt;&quot;, &quot;launch&quot;: [&quot;rviz&quot;, &quot;gz&quot;,&quot;gzclient&quot;,&quot;gzserver&quot;], &quot;type&quot;: &quot;ros&quot; } Go to the C++/Python code for the executables specified in the launch file and place a breakpoint in the required files. Now go to the Run and Debug Tab on the left sidebar of VS Code , select the launch configuration from the top drop-down menu and click the Play button to begin debugging. You can switch between different executables from the debugger menu. UNIT TEST CONFIGURATIONS I can’t stress enough on the importance of unit testing for a stable software release process and code maintenance. ROS 2 provides gtest for testing C++ nodes and pytest for testing Python nodes. colcon provides macros for test-aware compilation and verbs dedicated to testing the project in its entirety. You can execute colcon test to run your unit tests. The test files are generally stored inside a tests folder. To execute the unit tests for a particular package using colcon test command, give the test folder name and the name of the package at &amp;lt;specify_package_name_here&amp;gt; after --packages-select argument. { &quot;type&quot;: &quot;colcon&quot;, &quot;args&quot;: [ &quot;test&quot;, &quot;--ctest-args&quot;, “test”, &quot;--packages-select&quot;, “&amp;lt;specify_package_name_here&amp;gt;”, ], &quot;problemMatcher&quot;: [ &quot;$catkin-gcc&quot; ], &quot;group&quot;: &quot;build&quot;, &quot;label&quot;: &quot;colcon_test&quot; } Testing with pytest framework, you can specify the name of the test function at &amp;lt;specify_name_of_ specific_test_function&amp;gt; you created with the colcon test command to test for that specific test function after --pytest-args argument. { &quot;type&quot;: &quot;colcon&quot;, &quot;args&quot;: [ &quot;test&quot;, &quot;--packages-select&quot;, “&amp;lt;specify_packages_name_here&amp;gt;”, &quot;--pytest-args&quot;, &quot;-k&quot;, &quot;&amp;lt;specify_name_of_specific_test_function&amp;gt;&quot;, ], &quot;problemMatcher&quot;: [ &quot;$catkin-gcc&quot; ], &quot;group&quot;: &quot;build&quot;, &quot;label&quot;: &quot;colcon_pytest&quot; } To run the different colcon test tasks, use (CTRL + Shift + P), select Tasks: Run Task and then select the test task from the available options. Using a debugger with ROS 2 launch_test using the ROS Extension for VS Code is an active problem and has an open issue at the official GitHub repository. Conclusion By leveraging the power of VS Code and ROS extension, developers can streamline their coding process, improve productivity, and gain more control over their ROS projects. Whether it&apos;s setting up a ROS workspace, configuring build tasks, or utilizing ROS-specific features, understanding these configurations opens up new possibilities for efficient and effective ROS development. As mentioned previously, you can find the entire configurations from my GitHub repository. If you want to create a custom configuration, feel free to open a pull request in the GitHub repository. You can also create a Feature Request if you want me to implement your ideas. Embracing these configurations will undoubtedly empower ROS developers to unleash their full potential and embark on successful robotics projects using the VS Code ecosystem. If you liked the article, please buy me a ☕️ coffee Resources: Debug ROS Nodes Debugging ROS Node with VS-Code. A Decent Integration of VSCode to ROS Debugging in VS Code Tasks in Visual Studio Code</summary></entry><entry><title type="html">Exploration of VS Code Extensions for a ROS Developer</title><link href="http://localhost:4000/blog/VS-Code-ROS-Extensions/" rel="alternate" type="text/html" title="Exploration of VS Code Extensions for a ROS Developer" /><published>2023-06-15T00:00:00+05:30</published><updated>2023-06-15T00:00:00+05:30</updated><id>http://localhost:4000/blog/VS-Code-ROS-Extensions</id><content type="html" xml:base="http://localhost:4000/blog/VS-Code-ROS-Extensions/">&lt;h1 style=&quot;text-align: center;margin-top:20px;margin-bottom-20px;&quot;&gt;Exploration of VS Code extensions for a ROS Developer&lt;/h1&gt;

&lt;!--excerpt.start--&gt;
&lt;p style=&quot;margin: 20px 3rem;&quot;&gt;  
In the developers&apos; community, there will always be an ongoing debate about the best IDE (Integrated Development Environment) out there, be it &lt;a href=&quot;https://www.jetbrains.com/idea/&quot;&gt;IntelliJ&lt;/a&gt;, &lt;a href=&quot;https://developer.apple.com/xcode/&quot;&gt;Xcode&lt;/a&gt;, &lt;a href=&quot;https://www.eclipse.org/ide/&quot;&gt;Eclipse&lt;/a&gt;, &lt;a href=&quot;https://atom.en.softonic.com/&quot;&gt;Atom&lt;/a&gt;, &lt;a href=&quot;https://www.sublimetext.com/&quot;&gt;Sublime Text&lt;/a&gt;, or &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studios&lt;/a&gt;. But this blog isn’t about choosing the best IDE. I personally love to code in VS Code as a Robotics (ROS) developer. Being a ROS developer is way different than let’s say being a Web developer, especially in terms of the infrastructure available to make development easier.
When I first started coding, my VS Code setup was very minimal and the only extensions I used were specific to writing C++/Python code.  
Until now, I had been utilizing the command-line interface (CLI) to execute various functionalities within ROS.
&lt;/p&gt;
&lt;!--excerpt.end--&gt;

&lt;p style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;This is my experience of exploring the extensions available for ROS development and comprehension of the missing functionalities. &lt;br /&gt;
While doing research for this blog, the first thing I did was simply type ROS in the search bar for extensions in VS Code.&lt;/p&gt;

&lt;p style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;
&lt;img src=&quot;/assets/article5/image1.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
        margin-left: auto;
        margin-right: auto;
        width: 50vmax;&quot; /&gt;  
The very first &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-iot.vscode-ros&quot;&gt;Visual Studio Code extension for ROS was by Microsoft&lt;/a&gt; which provides ROS developers with a long list of features and functionalities like information about the ROS status and active topics, creating a ROS environment with sourced terminal, running ROS executables and launch files, and much more. This extension is readily available in the VS Code extensions marketplace and can be installed with a single click. 
&lt;/p&gt;

&lt;p style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;Some cool functionalities that you can enjoy after installing this extension are:
&lt;/p&gt;

&lt;ul style=&quot; margin: 20px 3rem;&quot;&gt;
    &lt;li&gt;&lt;i&gt;URDF Previewer&lt;/i&gt;&lt;br /&gt;
    Developing a robot’s URDF in ROS is tedious as you need to write the URDF file as well as a launch file for the robot state publisher, joint state publisher, and RViz to then visualize the robot model. Every time you make changes to the URDF code, you need to execute the launch file and review it in RViz. This process is time-consuming, repetitive and adds frustration for the developer. ROS VS Code extension is there to make this process easier by providing a URDF previewer. URDF previewer functionality enables the visualization of the robot model alongside the .urdf file as shown below. You can make the edits to the URDF file and automatically see the live update of the robot model making development much faster.
    &lt;img src=&quot;/assets/article5/image2.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
        padding: 10px;
        margin-left: auto;
        margin-right: auto;
        width: 50vmax;&quot; /&gt;  
    &lt;/li&gt;
    &lt;li&gt;&lt;i&gt;Multiple ROS Nodes Execution&lt;/i&gt;&lt;br /&gt;
    Traditionally, ROS developers have to open a new terminal tab to run multiple ROS nodes separately or even for running multiple ROS launch files. This also requires you to know the package name, executable names, etc. I have generally ended up trying to do tab completion to find the correct name of the node. The ROS VS Code extension makes this so much easier by automatically detecting and running the selected ROS packages via the executables or launch files. It will also take care of sourcing terminals with the correct path for successful execution.
      &lt;img src=&quot;/assets/article5/image3.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          padding: 10px;
          margin-left: auto;
          margin-right: auto;
          width: 50vmax;&quot; /&gt;  
      &lt;!-- &lt;div align=&quot;center&quot;&gt;Select a ROS command;&amp;nbsp;&amp;nbsp;&amp;nbsp;Select a ROS package;&amp;nbsp;&amp;nbsp;&amp;nbsp;Select a exectuable or launch file&lt;/div&gt; --&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;i&gt;Build Configurations&lt;/i&gt;&lt;br /&gt;
      Say goodbye to the days when you needed to type the &lt;code style=&quot;color:orange&quot;&gt;colcon build&lt;/code&gt; command for building ROS workspace along with numerous arguments over and over again. ROS VS Code plugin provides a smoother process to build ROS workspaces. By specifying catkin/colcon commands and arguments inside the &lt;code style=&quot;color:orange&quot;&gt;.vscode/tasks.json&lt;/code&gt; file, you can simply run the &lt;code style=&quot;color:orange&quot;&gt;colcon: build&lt;/code&gt; command to build the workspace.
      &lt;img src=&quot;/assets/article5/image42.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          padding: 10px;
          margin-left: auto;
          margin-right: auto;
          width: 50vmax;&quot; /&gt;  
      &lt;/li&gt;
      &lt;li&gt;&lt;i&gt;Debug Configurations&lt;/i&gt;&lt;br /&gt;
      Finding bugs in the codebase is always much more painful than actually writing a new node. But with ROS VS Code extension, setting up a working debugging session is pretty straightforward. All you need to do is add a launch configuration &lt;code style=&quot;color:orange&quot;&gt;(launch.json)&lt;/code&gt; to the &lt;code style=&quot;color:orange&quot;&gt;.vscode&lt;/code&gt; folder in the ROS workspace then you can set a breakpoint for the node you want to debug. This extension also works with attaching the debugger to multiple nodes as &lt;code style=&quot;color:orange&quot;&gt;launch.json&lt;/code&gt; can take an array of nodes.
      &lt;img src=&quot;/assets/article5/image55.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          padding: 10px;
          margin-left: auto;
          margin-right: auto;
          width: 50vmax;&quot; /&gt;  
      &lt;/li&gt;
      &lt;li&gt;&lt;i&gt;System Status&lt;/i&gt;&lt;br /&gt;
      The ROS Status page functionality provides information about the ROS Core/ROS 2 Deamon, active nodes, topics, and services.
      &lt;img src=&quot;/assets/article5/image6.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          padding: 10px;
          margin-left: auto;
          margin-right: auto;
          width: 50vmax;&quot; /&gt;  
      &lt;/li&gt;
      &lt;li&gt;&lt;i&gt;IntelliSense&lt;/i&gt;&lt;br /&gt;
      The ROS VS Code extension provides IntelliSense syntax highlighting and code completion for URDF/Xacro files, .msg files, .srv files, and almost all other ROS-related file types.
      &lt;img src=&quot;/assets/article5/image7.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          padding: 10px;
          margin-left: auto;
          margin-right: auto;
          width: 50vmax;&quot; /&gt;  
      &lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;Another plugin that I found useful was &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=twxs.cmake&quot;&gt;CMake by twxs&lt;/a&gt;: 
&lt;img src=&quot;/assets/article5/image8.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
        padding: 10px;
        margin-left: auto;
        margin-right: auto;
        width: 50vmax;&quot; /&gt; 
&lt;/p&gt;

&lt;ul style=&quot; margin: 20px 3rem;&quot;&gt;
    &lt;li&gt;&lt;i&gt;Syntax Formatting&lt;/i&gt;&lt;br /&gt;
    You can use this CMake extension in VS Code to get syntax highlighting and code completion for your &lt;code style=&quot;color:orange&quot;&gt;CMakeLists.txt&lt;/code&gt; files.&lt;/li&gt;
    &lt;img src=&quot;/assets/article5/image9.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
        padding: 10px;
        margin-left: auto;
        margin-right: auto;
        width: 50vmax;&quot; /&gt;  
&lt;/ul&gt;

&lt;p style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;Although the current extensions for VS Code for Robotics provide tons of features for a faster, better development process, as an experienced and active ROS developer, I find some essential features still missing.&lt;/p&gt;

&lt;ul style=&quot; margin: 20px 3rem;&quot;&gt;
    &lt;li&gt;&lt;i&gt;ROS Bag interface&lt;/i&gt;&lt;br /&gt;
    Even for the most basic use case of let’s say tuning Slam Toolbox, I would look at the rosbag and play it several times to tune the algorithm to my satisfaction. ROS Bags are an essential block for any robotics system. There is only &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=lochbrunner.vscode-rosbag&quot;&gt;one plugin&lt;/a&gt; currently available for ROS 1 that can list the timestamps and the topics of the messages stored in the rosbag file. And the output of &lt;code style=&quot;color:orange&quot;&gt;rosbag info filename&lt;/code&gt;. For starters, I would like to at least have the ability to play rosbag using a click-on Play Button from the VS Code menu bar itself.
    &lt;/li&gt;
    &lt;li&gt;&lt;i&gt;Parameters in System Status&lt;/i&gt;&lt;br /&gt;
    The change in the robot’s environment might create the need to update a few ROS parameters or maybe the customer wants the robots to operate at maximum speed compared to another customer. Maintaining and managing ROS Parameters can quickly become very painful. Although the ROS system status functionality can display active nodes, topics, and services, it does not show any information on active parameters in the computation graph.
    &lt;/li&gt;
    &lt;li&gt;&lt;i&gt;Joint Visualisation in URDF Previewer&lt;/i&gt;&lt;br /&gt;
    While setting up the robot’s URDF, I generally try to test out the movement of each joint specifically the direction and axes of rotation. The current URDF previewer should also support Joint Visualisation for ease of debugging and verification of the robot model.
    &lt;/li&gt;
    &lt;li&gt;&lt;i&gt;Interactive ROS Graph Visualisation&lt;/i&gt;&lt;br /&gt;
    I would love to have an extension that visualizes the ROS graph, displaying nodes, topics like tf, and connections in an interactive graph view.
    &lt;/li&gt;
    &lt;li&gt;&lt;i&gt;ROS Documentation Integration&lt;/i&gt;&lt;br /&gt;
    Another cool to have extension could be a ROS Documentation Integrator. This extension can integrate ROS documentation directly into VS Code. It can allow you to quickly search and access ROS API documentation, tutorials, and examples without leaving the editor.
    &lt;/li&gt;
    &lt;li&gt;&lt;i&gt;Unit &amp;amp; Integration Tests&lt;/i&gt;&lt;br /&gt;
    This is the one I most desperately need. An extension that can enable running and managing unit tests/integration tests (both Google tests and rostest) directly from VS Code. It can provide an intuitive interface for executing tests, viewing test results, and generating test reports.
    &lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;I am really grateful to have installed the plugins available for ROS. If I have to put an estimate on the percentage of the time these plugins have saved, I would say it is about a 40% reduction in the overall development time especially for writing and executing ROS nodes. The ROS plugins aren’t perfectly developed yet as witnessed especially due to the unique challenges of visualization and data formats of ROS. As the robotics community is continuously growing, I have high hopes that the development environments would also improve over time. As of today, I highly recommend using the existing plugins to save time, especially for startups who struggle with maintaining one development process across the organization.&lt;/p&gt;

&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;If you liked the article, please buy me a &lt;a style=&quot;
                    text-decoration:none;
                    display: inline-block;
                    outline: 0;
                    cursor: pointer;
                    text-align: center;
                    border: 0;
                    padding: 7px 16px;
                    min-height: 36px;
                    min-width: 36px;
                    color: #ffffff;
                    background: #11999e;
                    border-radius: 4px;
                    font-weight: 500;
                    font-size: 18px;
                    box-shadow: rgba(0, 0, 0, 0.05) 0px 1px 0px 0px, rgba(0, 0, 0, 0.2) 0px -1px 0px 0px inset;
                    :hover {
                        background: #006e52;
                    }
                &quot; href=&quot;https://www.buymeacoffee.com/roboticsspace&quot;&gt;☕️ coffee&lt;/a&gt;&lt;/p&gt;

&lt;h3 style=&quot; margin: 20px 3rem;&quot;&gt;Resources:&lt;/h3&gt;
&lt;ul style=&quot; margin: 20px 3rem;&quot;&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://hiro-group.ronc.one/vscode_urdf_previewer.html&quot;&gt;https://hiro-group.ronc.one/vscode_urdf_previewer.html&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://github.com/ms-iot/vscode-ros/blob/master/doc/debug-support.md&quot;&gt;https://github.com/ms-iot/vscode-ros/blob/master/doc/debug-support.md&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://github.com/lzptr/VS_Code_ROS&quot;&gt;https://github.com/lzptr/VS_Code_ROS&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://docs.ros.org/en/foxy/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.html&quot;&gt;https://docs.ros.org/en/foxy/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.html&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;</content><author><name>Apoorva Gupta</name></author><category term="Blog" /><category term="Post Formats" /><category term="readability" /><category term="standard" /><summary type="html">Exploration of VS Code extensions for a ROS Developer In the developers&apos; community, there will always be an ongoing debate about the best IDE (Integrated Development Environment) out there, be it IntelliJ, Xcode, Eclipse, Atom, Sublime Text, or Visual Studios. But this blog isn’t about choosing the best IDE. I personally love to code in VS Code as a Robotics (ROS) developer. Being a ROS developer is way different than let’s say being a Web developer, especially in terms of the infrastructure available to make development easier. When I first started coding, my VS Code setup was very minimal and the only extensions I used were specific to writing C++/Python code. Until now, I had been utilizing the command-line interface (CLI) to execute various functionalities within ROS. This is my experience of exploring the extensions available for ROS development and comprehension of the missing functionalities. While doing research for this blog, the first thing I did was simply type ROS in the search bar for extensions in VS Code. The very first Visual Studio Code extension for ROS was by Microsoft which provides ROS developers with a long list of features and functionalities like information about the ROS status and active topics, creating a ROS environment with sourced terminal, running ROS executables and launch files, and much more. This extension is readily available in the VS Code extensions marketplace and can be installed with a single click. Some cool functionalities that you can enjoy after installing this extension are: URDF Previewer Developing a robot’s URDF in ROS is tedious as you need to write the URDF file as well as a launch file for the robot state publisher, joint state publisher, and RViz to then visualize the robot model. Every time you make changes to the URDF code, you need to execute the launch file and review it in RViz. This process is time-consuming, repetitive and adds frustration for the developer. ROS VS Code extension is there to make this process easier by providing a URDF previewer. URDF previewer functionality enables the visualization of the robot model alongside the .urdf file as shown below. You can make the edits to the URDF file and automatically see the live update of the robot model making development much faster. Multiple ROS Nodes Execution Traditionally, ROS developers have to open a new terminal tab to run multiple ROS nodes separately or even for running multiple ROS launch files. This also requires you to know the package name, executable names, etc. I have generally ended up trying to do tab completion to find the correct name of the node. The ROS VS Code extension makes this so much easier by automatically detecting and running the selected ROS packages via the executables or launch files. It will also take care of sourcing terminals with the correct path for successful execution. Build Configurations Say goodbye to the days when you needed to type the colcon build command for building ROS workspace along with numerous arguments over and over again. ROS VS Code plugin provides a smoother process to build ROS workspaces. By specifying catkin/colcon commands and arguments inside the .vscode/tasks.json file, you can simply run the colcon: build command to build the workspace. Debug Configurations Finding bugs in the codebase is always much more painful than actually writing a new node. But with ROS VS Code extension, setting up a working debugging session is pretty straightforward. All you need to do is add a launch configuration (launch.json) to the .vscode folder in the ROS workspace then you can set a breakpoint for the node you want to debug. This extension also works with attaching the debugger to multiple nodes as launch.json can take an array of nodes. System Status The ROS Status page functionality provides information about the ROS Core/ROS 2 Deamon, active nodes, topics, and services. IntelliSense The ROS VS Code extension provides IntelliSense syntax highlighting and code completion for URDF/Xacro files, .msg files, .srv files, and almost all other ROS-related file types. Another plugin that I found useful was CMake by twxs: Syntax Formatting You can use this CMake extension in VS Code to get syntax highlighting and code completion for your CMakeLists.txt files. Although the current extensions for VS Code for Robotics provide tons of features for a faster, better development process, as an experienced and active ROS developer, I find some essential features still missing. ROS Bag interface Even for the most basic use case of let’s say tuning Slam Toolbox, I would look at the rosbag and play it several times to tune the algorithm to my satisfaction. ROS Bags are an essential block for any robotics system. There is only one plugin currently available for ROS 1 that can list the timestamps and the topics of the messages stored in the rosbag file. And the output of rosbag info filename. For starters, I would like to at least have the ability to play rosbag using a click-on Play Button from the VS Code menu bar itself. Parameters in System Status The change in the robot’s environment might create the need to update a few ROS parameters or maybe the customer wants the robots to operate at maximum speed compared to another customer. Maintaining and managing ROS Parameters can quickly become very painful. Although the ROS system status functionality can display active nodes, topics, and services, it does not show any information on active parameters in the computation graph. Joint Visualisation in URDF Previewer While setting up the robot’s URDF, I generally try to test out the movement of each joint specifically the direction and axes of rotation. The current URDF previewer should also support Joint Visualisation for ease of debugging and verification of the robot model. Interactive ROS Graph Visualisation I would love to have an extension that visualizes the ROS graph, displaying nodes, topics like tf, and connections in an interactive graph view. ROS Documentation Integration Another cool to have extension could be a ROS Documentation Integrator. This extension can integrate ROS documentation directly into VS Code. It can allow you to quickly search and access ROS API documentation, tutorials, and examples without leaving the editor. Unit &amp;amp; Integration Tests This is the one I most desperately need. An extension that can enable running and managing unit tests/integration tests (both Google tests and rostest) directly from VS Code. It can provide an intuitive interface for executing tests, viewing test results, and generating test reports. I am really grateful to have installed the plugins available for ROS. If I have to put an estimate on the percentage of the time these plugins have saved, I would say it is about a 40% reduction in the overall development time especially for writing and executing ROS nodes. The ROS plugins aren’t perfectly developed yet as witnessed especially due to the unique challenges of visualization and data formats of ROS. As the robotics community is continuously growing, I have high hopes that the development environments would also improve over time. As of today, I highly recommend using the existing plugins to save time, especially for startups who struggle with maintaining one development process across the organization. If you liked the article, please buy me a ☕️ coffee Resources: https://hiro-group.ronc.one/vscode_urdf_previewer.html https://github.com/ms-iot/vscode-ros/blob/master/doc/debug-support.md https://github.com/lzptr/VS_Code_ROS https://docs.ros.org/en/foxy/How-To-Guides/Setup-ROS-2-with-VSCode-and-Docker-Container.html</summary></entry><entry><title type="html">Rust For Robotics</title><link href="http://localhost:4000/blog/Rust-For-Robotics/" rel="alternate" type="text/html" title="Rust For Robotics" /><published>2023-06-13T00:00:00+05:30</published><updated>2023-06-13T00:00:00+05:30</updated><id>http://localhost:4000/blog/Rust-For-Robotics</id><content type="html" xml:base="http://localhost:4000/blog/Rust-For-Robotics/">&lt;h1 style=&quot;text-align: center;margin-top:20px;margin-bottom-20px;&quot;&gt;Rust For Robotics&lt;/h1&gt;

&lt;!--excerpt.start--&gt;
&lt;p style=&quot;margin: 20px 3rem;&quot;&gt;  
This blog is a written presentation of the talk I gave at ROS Meetup Delhi, India in April 2023. &lt;br /&gt;
I was inspired by &lt;a href=&quot;https://www.tangramvision.com/&quot;&gt;Tangram Vision&lt;/a&gt;’s work on Rust for Robotics and the blogs, and talks by &lt;a href=&quot;https://www.linkedin.com/in/bminortx/&quot;&gt;Brandon Minor, CEO&lt;/a&gt;. &lt;/p&gt;
&lt;!--excerpt.end--&gt;

&lt;p style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;So, I will start with asking a simple question. &lt;/p&gt;

&lt;h3 style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;Why are Roboticist looking for a new programming language?&lt;/h3&gt;

&lt;p style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;As a Roboticist, my preferable coding language is C++ as this is the language that runs on the actual robots. Generally, Python-based ROS nodes suffer performance issues on hardware. Python and in some cases, Matlab are generally used for research and proof of concept purposes. &lt;br /&gt;
C++ is well suited for embedded platforms as it can get &lt;b&gt;“Close to the metal”&lt;/b&gt;.&lt;br /&gt;
But C++ comes with its own set of problems:
  &lt;/p&gt;

&lt;ul style=&quot; margin: 20px 3rem;&quot;&gt;
      &lt;li&gt; &lt;i&gt;Portability between different platforms and operating systems&lt;/i&gt;&lt;br /&gt;
      In a real-world scenario, my development system and deployment system would be quite different from each other as shown below.
      &lt;img src=&quot;/assets/article4/image1.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          padding: 10px;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;  
          The performance of the C++ code gets affected by the number of threads, and different operating systems, and isn’t consistent across different platforms.
      &lt;/li&gt;
      &lt;li&gt;&lt;i&gt;Slow Compile Time&lt;/i&gt;&lt;br /&gt;
      Based on my experience, for about 20 ROS C++ packages, the code compile time was anywhere between 45 minutes to 1 hour. Of course, you can build only one package at a time during debugging but for verification and sanity checks, you will build the entire codebase with integration tests and if the bug is still present, the compile time adds up quickly to be very painful and could easily become an overhead.
      &lt;/li&gt;
      &lt;li&gt;&lt;i&gt;Cyclic Dependency&lt;/i&gt;&lt;br /&gt;
      In ROS, Node 1 can depend on Node 2 for a .msg file. Node 2 depends on Node 3. Node 3 depends on Node 1 for a .msg file. This can lead to cyclic dependencies if the developer is not careful. 
      &lt;/li&gt;
      &lt;li&gt;&lt;i&gt;Manual Memory Management causes leaks and crashes&lt;/i&gt;&lt;br /&gt;
      In C++, a developer needs to figure out when and where to use the mutex to prevent multiple threads from accessing the same data.
      &lt;/li&gt;
      &lt;li&gt;&lt;i&gt;There is no built-in memory safety&lt;/i&gt;
      &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;Hello, Rust!&lt;/h3&gt;
&lt;p style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;Rust is an open Source Systems Programming Language created by Mozilla Research Project.
Fun Fact: It was voted as the most loved language by StackOverflow four years in a row. It is developed with an emphasis on Safety, Speed, and Concurrency. It provides High-Level Abstraction and Low-Level control over system resources.&lt;br /&gt;&lt;br /&gt;
Rust is based on two principles:&lt;br /&gt;
&lt;img src=&quot;/assets/article4/image2.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          padding: 10px;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;  &lt;br /&gt;
But why is there a Rust buzz? It will be quite evident soon how all the problems with C++ are magically taken care of by Rust.
  &lt;/p&gt;
&lt;ul style=&quot; margin: 20px 3rem;&quot;&gt;
      &lt;li&gt;&lt;i&gt;Portability&lt;/i&gt;&lt;br /&gt;
        Rust is a cross-platform language and performance is consistent across different operating systems.
      &lt;/li&gt;
      &lt;li&gt;&lt;i&gt;Performance&lt;/i&gt;&lt;br /&gt;
        There is zero cost for abstraction, and move semantics, leading to potentially faster code resolving the problem of slow compile times with C++.
      &lt;/li&gt;
      &lt;li&gt;&lt;i&gt;Painless Packaging and Dependency Management&lt;/i&gt;&lt;br /&gt;
        Rust provides Cargo and Xargo for package management that can prevent cyclic dependency.
      &lt;/li&gt;
      &lt;li&gt;&lt;i&gt;Concurrency&lt;/i&gt;&lt;br /&gt;
        Rust prevents data races and deadlocks. There is no need for manual management of mutexes and locks. 
      &lt;/li&gt;
      &lt;li&gt;&lt;i&gt;Memory Safety &lt;/i&gt;&lt;br /&gt;
        Null pointers and dangling pointers are not allowed to prevent memory leaks.
      &lt;/li&gt;
      &lt;li&gt;&lt;i&gt;Type Inference and Efficient C Bindings&lt;/i&gt;&lt;br /&gt;
        In short, if a function asks for degrees and you provide radians, Rust can automatically infer that type conversion is needed. And it will use the type conversion function from radians to degrees if it has been defined. How cool is that?
      &lt;/li&gt;
      &lt;li&gt;&lt;i&gt;Safety&lt;/i&gt;&lt;br /&gt;
       It is very hard to write code with undefined behavior in Rust.
      &lt;/li&gt;
      &lt;li&gt;&lt;i&gt;Community&lt;/i&gt;&lt;br /&gt;
      The Rust User Forum, internal forum, and chat platforms are heavily active to contribute, develop, and learn Rust. For more information, visit &lt;a href=&quot;https://www.rust-lang.org/community&quot;&gt;https://www.rust-lang.org/community&lt;/a&gt;.
      &lt;/li&gt;
&lt;/ul&gt;

&lt;p style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;Before looking at Rust code, it is important to understand the basic Rust Terminologies.
&lt;img src=&quot;/assets/article4/image3.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          padding: 10px;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;  
  &lt;/p&gt;

&lt;h3 style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;Ready to witness Rust&apos;s magic?&lt;/h3&gt;
&lt;p style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;In the below code, I have defined a dangling pointer. A dangling pointer is a pointer that doesn’t point to a valid object. 
&lt;img src=&quot;/assets/article4/image4.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          padding: 10px;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;  
I declare a mutable raw pointer &lt;code style=&quot;color:orange&quot;&gt;p&lt;/code&gt; as a null pointer in line 2 and I assign &lt;code style=&quot;color:orange&quot;&gt;p&lt;/code&gt; to a new pointer &lt;code style=&quot;color:orange&quot;&gt;q&lt;/code&gt;. 
Then I free the memory allocated to &lt;code style=&quot;color:orange&quot;&gt;p&lt;/code&gt; using the C free function. &lt;br /&gt;
This leaves q as a dangling pointer since it still points to the memory location that was just freed.&lt;br /&gt;
Finally, I attempt to print the value at &lt;code style=&quot;color:orange&quot;&gt;q&lt;/code&gt;, which leads to undefined behavior since the memory location it points to has been freed.&lt;br /&gt;
Now, I know nobody would deliberately write such code but dangling pointers can exist under certain unknown circumstances in a fairly large codebase.
  &lt;img src=&quot;/assets/article4/image5.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          padding: 10px;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;
  
  When I try to compile the code in Rust, the compiler throws an error and will not build the code at all. This will never happen in C++ and mostly, I would have to attach the debugger and spend hours finding the crash. &lt;br /&gt;
That is how amazing is the safety provided by Rust. 
  &lt;/p&gt;

&lt;h3 style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;ROS and Rust&lt;/h3&gt;
&lt;p style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;Let’s take a turn and see how ROS and Rust interact with each other.&lt;br /&gt;
Below are the Rust-based ROS packages available to begin development of Robotics code in Rust.&lt;/p&gt;

&lt;p style=&quot;text-align: center; margin: auto 3rem;&quot;&gt;
&lt;img src=&quot;/assets/article4/image6.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          padding: 1px;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;  
Links are available in the Resources section.&lt;/p&gt;

&lt;p style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;The wait is over and now I will show you an example of Rust in Robotics.&lt;br /&gt;
I have a simple multi-threading model in ROS 2 shown below. By default, the ROS 2 C++ callbacks are sequential and not parallel. In this example, I have set up two string callbacks in ROS 2 both printing the incoming string from the topic.

  &lt;img src=&quot;/assets/article4/image7.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          padding: 10px;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;
  
  Furthermore, I have added a 2 seconds wait in callback1. This causes the callback2 to be blocked by callback1 and the rate at which callback should be executed is not maintained as evidenced by the execution of the code. From the timestamp, it is seen that the code execution was; callback1 (16824198&lt;b&gt;71&lt;/b&gt;.593) -&amp;gt; wait for 2 seconds -&amp;gt; print the incoming string ‘hey’ (16824198&lt;b&gt;73&lt;/b&gt;.593) when callback2’s ‘oy’ message was blocked.

  &lt;img src=&quot;/assets/article4/image8.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          padding: 10px;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;

  Now imagine a robot’s camera image callback is blocked by another callback and the robot is operating on an older camera image for object detection. The robot will not have the latest information about the obstacles. Robots operating on delayed and old information can lead to horrible safety-related incidents and collisions.&lt;br /&gt;
  ROS 2 does provide a solution that is &lt;b&gt;&lt;a href=&quot;https://docs.ros.org/en/humble/Concepts/About-Executors.html&quot;&gt;MultiThreadedExecuter&lt;/a&gt;&lt;/b&gt; with callback groups. But it comes with the overhead of deadlocks, manual memory management, race condition, deciding the number of threads, and scheduling execution. All of them being standard problems with C++.
  Fortunately, there is Rust to the rescue. &lt;br /&gt;
  The next code is an example of the same use case written in Rust where I have created two threads that can run each callback parallelly without blocking each other. 
  &lt;img src=&quot;/assets/article4/image9.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          padding: 10px;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;
  From the below result, it is evident from the timestamp that callback1 is published after every 2 seconds while callback2 keeps receiving messages.

  &lt;img src=&quot;/assets/article4/image10.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          padding: 10px;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;
  This example is for a very basic use case of publishing strings. Generally, I would want to extract data from the callbacks and use it elsewhere in the codebase. &lt;br /&gt;

  Now, this is where things start getting complicated as there will be a case where one thread would be updating the data while another wants to access it simultaneously. 

  &lt;img src=&quot;/assets/article4/image11.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          padding: 10px;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;
  In Rust, I can create an &lt;code style=&quot;color:orange&quot;&gt;Arc&lt;/code&gt; that allows multiple ownership while ensuring thread safety. Overall, in the first line of the example above, a thread-safe shared string is created that can be accessed and modified by multiple threads simultaneously without causing data races. In the second line, I create a clone of data1 since we need to pass it to another thread inside the callback. In this way, I can easily access the data while printing as well as inside the thread without manually managing and figuring out when to lock and unlock the mutex. 
  &lt;br /&gt;&lt;br /&gt;
  Here are some companies already using Rust.
   &lt;img src=&quot;/assets/article4/image12.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          padding: 10px;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;&lt;br /&gt;
  As for Robotics, Rust is ready to be used for UI/Frontend, Webhooks, and systems programming.&lt;br /&gt;
  While RUST is safe, efficient, and user-friendly, it is heavily under development, especially for ROS
  Also, C++ has been around for decades whereas Rust has been around only for about 10 years.
  In my opinion, Rust is very promising as witnessed in the blog but it will take time for Rust to become mainstream for Robotics.


  &lt;/p&gt;

&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;If you liked the article, please buy me a &lt;a style=&quot;
                    text-decoration:none;
                    display: inline-block;
                    outline: 0;
                    cursor: pointer;
                    text-align: center;
                    border: 0;
                    padding: 7px 16px;
                    min-height: 36px;
                    min-width: 36px;
                    color: #ffffff;
                    background: #11999e;
                    border-radius: 4px;
                    font-weight: 500;
                    font-size: 18px;
                    box-shadow: rgba(0, 0, 0, 0.05) 0px 1px 0px 0px, rgba(0, 0, 0, 0.2) 0px -1px 0px 0px inset;
                    :hover {
                        background: #006e52;
                    }
                &quot; href=&quot;https://www.buymeacoffee.com/roboticsspace&quot;&gt;☕️ coffee&lt;/a&gt;&lt;/p&gt;

&lt;h3 style=&quot; margin: 20px 3rem;&quot;&gt;Resources:&lt;/h3&gt;
&lt;ul style=&quot; margin: 20px 3rem;&quot;&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://github.com/adnanademovic/rosrust&quot;&gt;rosrust&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
       &lt;a href=&quot;https://github.com/ros2-rust/ros2_rust&quot;&gt;ros2_rust&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://github.com/Carter12s/roslibrust&quot;&gt;roslibrust&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
       &lt;a href=&quot;https://github.com/sequenceplanner/r2r&quot;&gt;r2r&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://github.com/jhelovuo/RustDDS&quot;&gt;RustDDS&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
       &lt;a href=&quot;https://github.com/rclrust/rclrust&quot;&gt;rclrust&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://docs.rs/rosbag/latest/rosbag/&quot;&gt;rosbag&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://github.com/arjo129/rustros_tf&quot;&gt;rustros_tf&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://docs.rs/optimization_engine/latest/optimization_engine/&quot;&gt;optimization-engine&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://robotics.rs/&quot;&gt;https://robotics.rs/&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://www.tangramvision.com/blog/why-rust-for-robots&quot;&gt;https://www.tangramvision.com/blog/why-rust-for-robots&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://medium.com/luos/why-rust-is-the-future-of-robotics-81d7fb68fe37&quot;&gt;https://medium.com/luos/why-rust-is-the-future-of-robotics-81d7fb68fe37&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://doc.rust-lang.org/book/ch03-00-common-programming-concepts.html&quot;&gt;https://doc.rust-lang.org/book/ch03-00-common-programming-concepts.html&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://roboticsbackend.com/ros-asyncspinner-example/&quot;&gt;https://roboticsbackend.com/ros-asyncspinner-example/&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;</content><author><name>Apoorva Gupta</name></author><category term="Blog" /><category term="Post Formats" /><category term="readability" /><category term="standard" /><summary type="html">Rust For Robotics This blog is a written presentation of the talk I gave at ROS Meetup Delhi, India in April 2023. I was inspired by Tangram Vision’s work on Rust for Robotics and the blogs, and talks by Brandon Minor, CEO. So, I will start with asking a simple question. Why are Roboticist looking for a new programming language? As a Roboticist, my preferable coding language is C++ as this is the language that runs on the actual robots. Generally, Python-based ROS nodes suffer performance issues on hardware. Python and in some cases, Matlab are generally used for research and proof of concept purposes. C++ is well suited for embedded platforms as it can get “Close to the metal”. But C++ comes with its own set of problems: Portability between different platforms and operating systems In a real-world scenario, my development system and deployment system would be quite different from each other as shown below. The performance of the C++ code gets affected by the number of threads, and different operating systems, and isn’t consistent across different platforms. Slow Compile Time Based on my experience, for about 20 ROS C++ packages, the code compile time was anywhere between 45 minutes to 1 hour. Of course, you can build only one package at a time during debugging but for verification and sanity checks, you will build the entire codebase with integration tests and if the bug is still present, the compile time adds up quickly to be very painful and could easily become an overhead. Cyclic Dependency In ROS, Node 1 can depend on Node 2 for a .msg file. Node 2 depends on Node 3. Node 3 depends on Node 1 for a .msg file. This can lead to cyclic dependencies if the developer is not careful. Manual Memory Management causes leaks and crashes In C++, a developer needs to figure out when and where to use the mutex to prevent multiple threads from accessing the same data. There is no built-in memory safety Hello, Rust! Rust is an open Source Systems Programming Language created by Mozilla Research Project. Fun Fact: It was voted as the most loved language by StackOverflow four years in a row. It is developed with an emphasis on Safety, Speed, and Concurrency. It provides High-Level Abstraction and Low-Level control over system resources. Rust is based on two principles: But why is there a Rust buzz? It will be quite evident soon how all the problems with C++ are magically taken care of by Rust. Portability Rust is a cross-platform language and performance is consistent across different operating systems. Performance There is zero cost for abstraction, and move semantics, leading to potentially faster code resolving the problem of slow compile times with C++. Painless Packaging and Dependency Management Rust provides Cargo and Xargo for package management that can prevent cyclic dependency. Concurrency Rust prevents data races and deadlocks. There is no need for manual management of mutexes and locks. Memory Safety Null pointers and dangling pointers are not allowed to prevent memory leaks. Type Inference and Efficient C Bindings In short, if a function asks for degrees and you provide radians, Rust can automatically infer that type conversion is needed. And it will use the type conversion function from radians to degrees if it has been defined. How cool is that? Safety It is very hard to write code with undefined behavior in Rust. Community The Rust User Forum, internal forum, and chat platforms are heavily active to contribute, develop, and learn Rust. For more information, visit https://www.rust-lang.org/community. Before looking at Rust code, it is important to understand the basic Rust Terminologies. Ready to witness Rust&apos;s magic? In the below code, I have defined a dangling pointer. A dangling pointer is a pointer that doesn’t point to a valid object. I declare a mutable raw pointer p as a null pointer in line 2 and I assign p to a new pointer q. Then I free the memory allocated to p using the C free function. This leaves q as a dangling pointer since it still points to the memory location that was just freed. Finally, I attempt to print the value at q, which leads to undefined behavior since the memory location it points to has been freed. Now, I know nobody would deliberately write such code but dangling pointers can exist under certain unknown circumstances in a fairly large codebase. When I try to compile the code in Rust, the compiler throws an error and will not build the code at all. This will never happen in C++ and mostly, I would have to attach the debugger and spend hours finding the crash. That is how amazing is the safety provided by Rust. ROS and Rust Let’s take a turn and see how ROS and Rust interact with each other. Below are the Rust-based ROS packages available to begin development of Robotics code in Rust. Links are available in the Resources section. The wait is over and now I will show you an example of Rust in Robotics. I have a simple multi-threading model in ROS 2 shown below. By default, the ROS 2 C++ callbacks are sequential and not parallel. In this example, I have set up two string callbacks in ROS 2 both printing the incoming string from the topic. Furthermore, I have added a 2 seconds wait in callback1. This causes the callback2 to be blocked by callback1 and the rate at which callback should be executed is not maintained as evidenced by the execution of the code. From the timestamp, it is seen that the code execution was; callback1 (1682419871.593) -&amp;gt; wait for 2 seconds -&amp;gt; print the incoming string ‘hey’ (1682419873.593) when callback2’s ‘oy’ message was blocked. Now imagine a robot’s camera image callback is blocked by another callback and the robot is operating on an older camera image for object detection. The robot will not have the latest information about the obstacles. Robots operating on delayed and old information can lead to horrible safety-related incidents and collisions. ROS 2 does provide a solution that is MultiThreadedExecuter with callback groups. But it comes with the overhead of deadlocks, manual memory management, race condition, deciding the number of threads, and scheduling execution. All of them being standard problems with C++. Fortunately, there is Rust to the rescue. The next code is an example of the same use case written in Rust where I have created two threads that can run each callback parallelly without blocking each other. From the below result, it is evident from the timestamp that callback1 is published after every 2 seconds while callback2 keeps receiving messages. This example is for a very basic use case of publishing strings. Generally, I would want to extract data from the callbacks and use it elsewhere in the codebase. Now, this is where things start getting complicated as there will be a case where one thread would be updating the data while another wants to access it simultaneously. In Rust, I can create an Arc that allows multiple ownership while ensuring thread safety. Overall, in the first line of the example above, a thread-safe shared string is created that can be accessed and modified by multiple threads simultaneously without causing data races. In the second line, I create a clone of data1 since we need to pass it to another thread inside the callback. In this way, I can easily access the data while printing as well as inside the thread without manually managing and figuring out when to lock and unlock the mutex. Here are some companies already using Rust. As for Robotics, Rust is ready to be used for UI/Frontend, Webhooks, and systems programming. While RUST is safe, efficient, and user-friendly, it is heavily under development, especially for ROS Also, C++ has been around for decades whereas Rust has been around only for about 10 years. In my opinion, Rust is very promising as witnessed in the blog but it will take time for Rust to become mainstream for Robotics. If you liked the article, please buy me a ☕️ coffee Resources: rosrust ros2_rust roslibrust r2r RustDDS rclrust rosbag rustros_tf optimization-engine https://robotics.rs/ https://www.tangramvision.com/blog/why-rust-for-robots https://medium.com/luos/why-rust-is-the-future-of-robotics-81d7fb68fe37 https://doc.rust-lang.org/book/ch03-00-common-programming-concepts.html https://roboticsbackend.com/ros-asyncspinner-example/</summary></entry><entry><title type="html">ROS 2 Commands Cheat Sheet</title><link href="http://localhost:4000/blog/ROS2-Commands-Cheat-Sheet/" rel="alternate" type="text/html" title="ROS 2 Commands Cheat Sheet" /><published>2023-05-31T00:00:00+05:30</published><updated>2023-05-31T00:00:00+05:30</updated><id>http://localhost:4000/blog/ROS2-Commands-Cheat-Sheet</id><content type="html" xml:base="http://localhost:4000/blog/ROS2-Commands-Cheat-Sheet/">&lt;h1 style=&quot;text-align: center;margin-top:20px;margin-bottom-20px;&quot;&gt;ROS 2 Commands Cheat Sheet&lt;/h1&gt;

&lt;!--excerpt.start--&gt;
&lt;p style=&quot;margin: 20px 3rem;&quot;&gt;  
ROS 2 is the next-generation iteration of ROS, and it is intended to solve some of the constraints and problems that plagued ROS 1. These include scalability, real-time support, and interoperability with other middleware systems. &lt;br /&gt;
The robotics community is currently transitioning from ROS 1 to ROS 2.&lt;/p&gt;
&lt;!--excerpt.end--&gt;

&lt;p style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;ROS 1 Noetic&apos;s end-of-life (EOL) deadline was formally established for May 23, 2025, so existing robotics products on the market must begin moving their code from ROS 1 to ROS 2. As someone with a fair share of ROS 1 expertise, I&apos;ve been retraining my mind to type &lt;code style=&quot;color:orange&quot;&gt;colcon build&lt;/code&gt; instead of &lt;code style=&quot;color:orange&quot;&gt;catkin build&lt;/code&gt;, and may be even struggling a bit with all the new arguments available for colcon build. 
  &lt;/p&gt;

&lt;p style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;Here is the ultimate cheat sheet that is alphabetically organized, searchable, and copy-paste enabled for you to download and use without wasting your precious time asking ChatGPT for the equivalent command of ROS 1.
  &lt;/p&gt;

&lt;center&gt;
        &lt;iframe src=&quot;/assets/article3/ros2_humble_cheat_sheet2.pdf&quot; width=&quot;80%&quot; height=&quot;800&quot;&gt;
        &lt;/iframe&gt;
    &lt;/center&gt;

&lt;p style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;This cheat sheet is based on the ROS 2 Humble Hawksbill version. &lt;br /&gt;I will try to keep the cheat sheet as up-to-date as possible. &lt;br /&gt;Cheers!
  &lt;/p&gt;

&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;If you liked the article, please buy me a &lt;a style=&quot;
                    text-decoration:none;
                    display: inline-block;
                    outline: 0;
                    cursor: pointer;
                    text-align: center;
                    border: 0;
                    padding: 7px 16px;
                    min-height: 36px;
                    min-width: 36px;
                    color: #ffffff;
                    background: #11999e;
                    border-radius: 4px;
                    font-weight: 500;
                    font-size: 18px;
                    box-shadow: rgba(0, 0, 0, 0.05) 0px 1px 0px 0px, rgba(0, 0, 0, 0.2) 0px -1px 0px 0px inset;
                    :hover {
                        background: #006e52;
                    }
                &quot; href=&quot;https://www.buymeacoffee.com/roboticsspace&quot;&gt;☕️ coffee&lt;/a&gt;&lt;/p&gt;

&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;References:&lt;/p&gt;
&lt;ul style=&quot; margin: 20px 3rem;&quot;&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://www.theconstructsim.com/wp-content/uploads/2021/10/ROS2-Command-Cheat-Sheets-updated.pdf&quot;&gt;https://www.theconstructsim.com/wp-content/uploads/2021/10/ROS2-Command-Cheat-Sheets-updated.pdf&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://www.pyimagedata.com/ros-linux-commands/&quot;&gt;https://www.pyimagedata.com/ros-linux-commands/&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://docs.ros.org/en/humble/&quot;&gt;https://docs.ros.org/en/humble/&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://control.ros.org/master/doc/ros2_control/ros2controlcli/doc/userdoc.html&quot;&gt;https://control.ros.org/master/doc/ros2_control/ros2controlcli/doc/userdoc.html&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://colcon.readthedocs.io&quot;&gt;https://colcon.readthedocs.io&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;</content><author><name>Apoorva Gupta</name></author><category term="Blog" /><category term="Post Formats" /><category term="readability" /><category term="standard" /><summary type="html">ROS 2 Commands Cheat Sheet ROS 2 is the next-generation iteration of ROS, and it is intended to solve some of the constraints and problems that plagued ROS 1. These include scalability, real-time support, and interoperability with other middleware systems. The robotics community is currently transitioning from ROS 1 to ROS 2. ROS 1 Noetic&apos;s end-of-life (EOL) deadline was formally established for May 23, 2025, so existing robotics products on the market must begin moving their code from ROS 1 to ROS 2. As someone with a fair share of ROS 1 expertise, I&apos;ve been retraining my mind to type colcon build instead of catkin build, and may be even struggling a bit with all the new arguments available for colcon build. Here is the ultimate cheat sheet that is alphabetically organized, searchable, and copy-paste enabled for you to download and use without wasting your precious time asking ChatGPT for the equivalent command of ROS 1. This cheat sheet is based on the ROS 2 Humble Hawksbill version. I will try to keep the cheat sheet as up-to-date as possible. Cheers! If you liked the article, please buy me a ☕️ coffee References: https://www.theconstructsim.com/wp-content/uploads/2021/10/ROS2-Command-Cheat-Sheets-updated.pdf https://www.pyimagedata.com/ros-linux-commands/ https://docs.ros.org/en/humble/ https://control.ros.org/master/doc/ros2_control/ros2controlcli/doc/userdoc.html https://colcon.readthedocs.io</summary></entry><entry><title type="html">How to Install ROS 2 in Ubuntu 22.04 on Windows using Virtual Box</title><link href="http://localhost:4000/blog/How-To-Install-ROS-2-in-Ubuntu-22-04-VM-On-Windows/" rel="alternate" type="text/html" title="How to Install ROS 2 in Ubuntu 22.04 on Windows using Virtual Box" /><published>2023-05-09T00:00:00+05:30</published><updated>2023-05-09T00:00:00+05:30</updated><id>http://localhost:4000/blog/How-To-Install-ROS-2-in-Ubuntu-22-04-VM-On-Windows</id><content type="html" xml:base="http://localhost:4000/blog/How-To-Install-ROS-2-in-Ubuntu-22-04-VM-On-Windows/">&lt;h1 style=&quot;text-align: center;margin-top:20px;margin-bottom-20px;&quot;&gt;How to Install ROS 2 in Ubuntu 22.04 on Windows using Virtual Box&lt;/h1&gt;

&lt;!--excerpt.start--&gt;
&lt;p style=&quot;margin: 20px 3rem;&quot;&gt; Congratulations on taking the first step into the fascinating realm of robotics!&lt;br /&gt; In this tutorial, I will walk you through the in-depth process to install Ubuntu 22.04 with ROS 2 on a Windows 10/11 system using the free &lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot;&gt;Oracle VirtualBox software&lt;/a&gt;. 
&lt;!--excerpt.end--&gt;


  &lt;h2 style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;Pre Requisites&lt;/h2&gt;
  &lt;p style=&quot;margin: 20px 3rem;&quot;&gt;Make sure you satisfy the below prerequisites before installing Ubuntu 22.04 Virtual Machine and ROS 2 Humble on your Windows system.&lt;/p&gt;
   &lt;ul style=&quot;margin: 20px 3rem;&quot;&gt;
    &lt;li&gt;A computer running Windows 10 or 11. This guide uses Windows 10 64-bit. 
      Note: VirtualBox should work fine on any recent version of Windows 10 or 11.&lt;/li&gt;
    &lt;li&gt;Ubuntu: Desktop 22.04 ISO Image&lt;/li&gt;
    &lt;li&gt;Oracle VirtualBox 7.1 software&lt;/li&gt;
    &lt;li&gt;Minimum 50 GB of Storage memory&lt;/li&gt;
    &lt;li&gt;Minimum of 8 GB of RAM&lt;/li&gt;
  &lt;/ul&gt; 

  &lt;p style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;Let’s dive right into the process to set up Ubuntu 22.04 Virtual machine to start working with ROS 2.&lt;/p&gt;
    &lt;h3 style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;Download Ubuntu 22.04 ISO Image&lt;/h3&gt;
    &lt;ol style=&quot; margin: 20px 3rem;&quot;&gt;
      &lt;li&gt; This section will walk you through the process of downloading and installing the latest LTS version of the Ubuntu distribution of Linux, i.e., &lt;code style=&quot;color:orange&quot;&gt;Ubuntu 22.04 Jammy Jellyfish&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;Go to &lt;a href=&quot;https://cdimage.ubuntu.com/jammy/daily-live/current/&quot;&gt;Ubuntu 22.04 Download Page&lt;/a&gt; and Download the &lt;a href=&quot;https://cdimage.ubuntu.com/jammy/daily-live/current/jammy-desktop-amd64.iso&quot;&gt;64-bit PC (AMD64) desktop image&lt;/a&gt;. A &lt;code style=&quot;color:orange&quot;&gt;.iso&lt;/code&gt; desktop image will start downloading. &lt;br /&gt;
      &lt;img src=&quot;/assets/article2/ubuntu_install.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          padding: 10px;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;  
      NOTE : Windows 10/11 systems are based on the &lt;code style=&quot;color:orange&quot;&gt;AMD64/Intel-64&lt;/code&gt; architecture. Make sure you use the &lt;code style=&quot;color:orange&quot;&gt;AMD&lt;/code&gt; image for a Windows 10/11 system and not an &lt;code style=&quot;color:orange&quot;&gt;ARMv8&lt;/code&gt;  image. This step might take time depending on your internet speed. &lt;/li&gt;
    &lt;/ol&gt;
    &lt;h3 style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;Download and Install VirtualBox&lt;/h3&gt;
    &lt;ol style=&quot; margin: 20px 3rem;&quot;&gt;
      &lt;li&gt;In this section, you will use the Oracle VirtualBox software. VirtualBox is a free general-purpose virtualizer available across Linux, Mac OS, and Windows.&lt;/li&gt;
      &lt;li&gt; Go to the VirtualBox Downloads page &lt;a href=&quot;https://www.virtualbox.org/wiki/Downloads&quot;&gt;Oracle VM VirtualBox Downloads page&lt;/a&gt; and click on the &lt;b&gt;Windows hosts&lt;/b&gt; link to download the VirtualBox software. It will download a “.exe” installer file into your Downloads folder.
      &lt;img src=&quot;/assets/article2/virtualbox1.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          padding: 10px;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;  
      &lt;/li&gt;
      &lt;li&gt;Locate and double-click the VirtualBox installer file from the &lt;code style=&quot;color:orange&quot;&gt;Downloads&lt;/code&gt; folder in your File Explorer and it will launch the VirtualBox 7.0.8 Setup wizard.&lt;/li&gt;
      &lt;li&gt;Click &lt;b&gt;Next&lt;/b&gt; on the welcome screen in the Setup Wizard to begin the process.
      &lt;img src=&quot;/assets/article2/virtualbox2.JPG&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          padding: 10px;
          margin-left: auto;
          margin-right: auto;
          width: 35vmax;&quot; /&gt;  
      &lt;/li&gt;
      &lt;li&gt;
        On the &lt;b&gt;Custom Setup&lt;/b&gt; screen, you can leave the default selections for now so that the installer can set up Wizard to install the features. You can change the installation location by clicking on &lt;b&gt;Browse&lt;/b&gt; or else leave the default location. Click &lt;b&gt;Next&lt;/b&gt; when ready to continue.
        &lt;img src=&quot;/assets/article2/virtualbox3.JPG&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 35vmax;&quot; /&gt;        
      &lt;/li&gt;
      &lt;li&gt;
        The next screen will show a Warning about the network interfaces. The Setup Wizard will install a virtual network adapter that may reset and temporarily disconnect the network connection. Click on &lt;b&gt;Yes&lt;/b&gt; to process the installation.
        &lt;img src=&quot;/assets/article2/virtualbox4.JPG&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 35vmax;&quot; /&gt;        
      &lt;/li&gt;
      &lt;li&gt;
        The next screen will ask you to confirm the installation. Click on &lt;b&gt;Install&lt;/b&gt; to begin the installation of VirtualBox 7.0.8. The installation process will begin and it might take several minutes.
        &lt;img src=&quot;/assets/article2/virtualbox5.JPG&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 35vmax;&quot; /&gt;        
      &lt;/li&gt;
      &lt;li&gt;
        Once the installation is done, click on the &lt;b&gt;Finish&lt;/b&gt; button to exit the Setup Wizard.
        &lt;img src=&quot;/assets/article2/virtualbox7.JPG&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 35vmax;&quot; /&gt;        
      &lt;/li&gt;
      &lt;li&gt;
        Launch the VirtualBox Manager from the &lt;b&gt;&lt;code style=&quot;color:orange&quot;&gt;Start&lt;/code&gt;&lt;/b&gt; Menu. 
        &lt;img src=&quot;/assets/article2/virtualbox8.JPG&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 35vmax;&quot; /&gt;        
      &lt;/li&gt;
    &lt;/ol&gt;
    &lt;h3 style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;Creating Virtual Machine&lt;/h3&gt;
    &lt;p style=&quot;text-align: left; margin: 20px 3rem;&quot;&gt;Once the VirtualBox Software is installed properly, you can begin creating your Virtual Machine.&lt;/p&gt;
    &lt;ol style=&quot; margin: 20px 3rem;&quot;&gt;
      &lt;li&gt;
        Click the &lt;b&gt;New&lt;/b&gt; button from the top Menu on the &lt;b&gt;VirtualBox Manager&lt;/b&gt; window. This will open the &lt;b&gt;Create Virtual Machine&lt;/b&gt; wizard which will let you create and configure your new Virtual Machine with the desired settings.
        &lt;img src=&quot;/assets/article2/createvm1.JPG&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 35vmax;&quot; /&gt;        
      &lt;/li&gt;
      &lt;li&gt;
        On the &lt;b&gt;Virtual Machine Name and Operating System&lt;/b&gt; section, fill in the name, Folder (location to store the Virtual machine files), and select the &lt;b&gt;&lt;code style=&quot;color:orange&quot;&gt;Ubuntu 22.04 ISO Image&lt;/code&gt;&lt;/b&gt; (downloaded in the previous section) in the ISO Image option. &lt;br /&gt;Click on the &lt;b&gt;Next&lt;/b&gt; button to process.
        &lt;img src=&quot;/assets/article2/createvm2.JPG&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 35vmax;&quot; /&gt;        
      &lt;/li&gt;
      &lt;li&gt;On the &lt;b&gt;Unattended Guest OS Install Setup&lt;/b&gt; section, you need to enter your &lt;code style=&quot;color:orange&quot;&gt;username&lt;/code&gt; and &lt;code style=&quot;color:orange&quot;&gt;password&lt;/code&gt; in addition to your machine name so that it can be configured automatically during the first boot.&lt;/li&gt;
      &lt;li&gt;
        Also, check the &lt;b&gt;Guest Additions&lt;/b&gt; box to install the default Guest Additions ISO that is downloaded as part of VirtualBox.
        &lt;img src=&quot;/assets/article2/createvm3.JPG&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 35vmax;&quot; /&gt;        
      &lt;/li&gt;
      &lt;li&gt;
        In the next &lt;b&gt;Hardware&lt;/b&gt; section, specify how much of your host machine’s RAM and processors the virtual machine can use. Change the slider position to allocate the correct values. &lt;br /&gt; &lt;b&gt;NOTE:&lt;/b&gt; For using ROS 2 application, it is recommended to use a minimum of &lt;code style=&quot;color:orange&quot;&gt;8 GB RAM&lt;/code&gt; and at least &lt;code style=&quot;color:orange&quot;&gt;6 CPUs&lt;/code&gt;. 
        &lt;img src=&quot;/assets/article2/createvm4.JPG&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 35vmax;&quot; /&gt;        
      &lt;/li&gt;
      &lt;li&gt;
        Next in the &lt;b&gt;Virtual Hard Disk section&lt;/b&gt;, specify the size of the hard disk for the virtual machine. For ROS 2, it is recommended around &lt;code style=&quot;color:orange&quot;&gt;50 GB&lt;/code&gt; as a minimum.
        &lt;img src=&quot;/assets/article2/createvm5.JPG&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 35vmax;&quot; /&gt;        
      &lt;/li&gt;
      &lt;li&gt;
        Click &lt;b&gt;Next&lt;/b&gt; to continue and view a summary of your virtual machine setting. After this click &lt;b&gt;Finish&lt;/b&gt; to initialize the machine.
        &lt;img src=&quot;/assets/article2/createvm6.JPG&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 35vmax;&quot; /&gt;        
      &lt;/li&gt;
      &lt;li&gt;
        You will see a message saying &lt;code style=&quot;color:orange&quot;&gt;Powering VM up …&lt;/code&gt; in the VirtualBox manager and a new desktop Window will appear for your Ubuntu 22.04 Virtual machine’s first boot.
        &lt;img src=&quot;/assets/article2/createvm7.JPG&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 35vmax;&quot; /&gt;       
          &lt;br /&gt;
        &lt;img src=&quot;/assets/article2/createvm8.JPG&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 30vmax;&quot; /&gt;  
      &lt;/li&gt;
      &lt;li&gt;
        On the first boot, it will begin the unattended installation.
        &lt;img src=&quot;/assets/article2/vm1.JPG&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 30vmax;&quot; /&gt;        
      &lt;/li&gt;
      &lt;li&gt;
        Once the installation completes, the machine will automatically reboot to complete the installation.
        &lt;img src=&quot;/assets/article2/vm2.JPG&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 30vmax;&quot; /&gt;        
      &lt;/li&gt;
      &lt;li&gt;
        Finally, you will be greeted with the Ubuntu &lt;b&gt;log-in screen&lt;/b&gt; where you can enter your &lt;code style=&quot;color:orange&quot;&gt;username&lt;/code&gt; and &lt;code style=&quot;color:orange&quot;&gt;password&lt;/code&gt; defined during the previous setup.
        &lt;img src=&quot;/assets/article2/vm3.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 30vmax;&quot; /&gt;        
      &lt;/li&gt;
    &lt;/ol&gt;
    &lt;h3 style=&quot;text-align: left;margin: 20px 3rem;&quot;&gt;Install ROS 2 Humble Hawksbill&lt;/h3&gt;
    &lt;p style=&quot;text-align: left; margin: 20px 3rem;&quot;&gt;Hang in there!! &lt;br /&gt;
      You are one step away from becoming a ROS 2 developer with your Ubuntu 22.04 VirtualBox Machine setup. &lt;br /&gt;&lt;br /&gt;
      To install the latest LTS version of ROS 2, i.e., Humble Hawksbill, follow the steps &lt;a href=&quot;https://www.theroboticsspace.com/blog/How-To-Install-ROS-2-in-Ubuntu-22-04-On-M1-Mac/#rosinstallation&quot;&gt;here&lt;/a&gt;.
      &lt;br /&gt;
      Voila!! I hope you have ROS 2 Humble Running on Ubuntu 22.04 inside a Virtual Machine on Windows Laptop.
    &lt;/p&gt;
  &lt;/p&gt;

&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;If you liked the article, please buy me a &lt;a style=&quot;
                    text-decoration:none;
                    display: inline-block;
                    outline: 0;
                    cursor: pointer;
                    text-align: center;
                    border: 0;
                    padding: 7px 16px;
                    min-height: 36px;
                    min-width: 36px;
                    color: #ffffff;
                    background: #11999e;
                    border-radius: 4px;
                    font-weight: 500;
                    font-size: 18px;
                    box-shadow: rgba(0, 0, 0, 0.05) 0px 1px 0px 0px, rgba(0, 0, 0, 0.2) 0px -1px 0px 0px inset;
                    :hover {
                        background: #006e52;
                    }
                &quot; href=&quot;https://www.buymeacoffee.com/roboticsspace&quot;&gt;☕️ coffee&lt;/a&gt;&lt;/p&gt;

&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;Currently, I am reading &lt;a href=&quot;https://www.amazon.in/dp/0241621240?&amp;amp;linkCode=ll1&amp;amp;tag=sarthakgupta0-21&amp;amp;linkId=414822d32ae70a18c28556fa851f4f32&amp;amp;language=en_IN&amp;amp;ref_=as_li_ss_tl&quot;&gt;The Light We Carry&lt;/a&gt; by Michelle Obama. &lt;/p&gt;

&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;References:&lt;/p&gt;
&lt;ul style=&quot; margin: 20px 3rem;&quot;&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://ubuntu.com/tutorials/how-to-run-ubuntu-desktop-on-a-virtual-machine-using-virtualbox#1-overview&quot;&gt;https://ubuntu.com/tutorials/how-to-run-ubuntu-desktop-on-a-virtual-machine-using-virtualbox&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://trendoceans.com/install-ubuntu-on-virtualbox/&quot;&gt;https://trendoceans.com/install-ubuntu-on-virtualbox/&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://adamtheautomator.com/install-virtualbox-on-windows-10/&quot;&gt;https://adamtheautomator.com/install-virtualbox-on-windows-10/&lt;/a&gt;
    &lt;/li&gt;
    &lt;li&gt;
      &lt;a href=&quot;https://docs.ros.org/en/humble/index.html&quot;&gt;https://docs.ros.org/en/humble/index.html&lt;/a&gt;
    &lt;/li&gt;
  &lt;/ul&gt;</content><author><name>Apoorva Gupta</name></author><category term="Blog" /><category term="Post Formats" /><category term="readability" /><category term="standard" /><summary type="html">How to Install ROS 2 in Ubuntu 22.04 on Windows using Virtual Box Congratulations on taking the first step into the fascinating realm of robotics! In this tutorial, I will walk you through the in-depth process to install Ubuntu 22.04 with ROS 2 on a Windows 10/11 system using the free Oracle VirtualBox software. Pre Requisites Make sure you satisfy the below prerequisites before installing Ubuntu 22.04 Virtual Machine and ROS 2 Humble on your Windows system. A computer running Windows 10 or 11. This guide uses Windows 10 64-bit. Note: VirtualBox should work fine on any recent version of Windows 10 or 11. Ubuntu: Desktop 22.04 ISO Image Oracle VirtualBox 7.1 software Minimum 50 GB of Storage memory Minimum of 8 GB of RAM Let’s dive right into the process to set up Ubuntu 22.04 Virtual machine to start working with ROS 2. Download Ubuntu 22.04 ISO Image This section will walk you through the process of downloading and installing the latest LTS version of the Ubuntu distribution of Linux, i.e., Ubuntu 22.04 Jammy Jellyfish. Go to Ubuntu 22.04 Download Page and Download the 64-bit PC (AMD64) desktop image. A .iso desktop image will start downloading. NOTE : Windows 10/11 systems are based on the AMD64/Intel-64 architecture. Make sure you use the AMD image for a Windows 10/11 system and not an ARMv8 image. This step might take time depending on your internet speed. Download and Install VirtualBox In this section, you will use the Oracle VirtualBox software. VirtualBox is a free general-purpose virtualizer available across Linux, Mac OS, and Windows. Go to the VirtualBox Downloads page Oracle VM VirtualBox Downloads page and click on the Windows hosts link to download the VirtualBox software. It will download a “.exe” installer file into your Downloads folder. Locate and double-click the VirtualBox installer file from the Downloads folder in your File Explorer and it will launch the VirtualBox 7.0.8 Setup wizard. Click Next on the welcome screen in the Setup Wizard to begin the process. On the Custom Setup screen, you can leave the default selections for now so that the installer can set up Wizard to install the features. You can change the installation location by clicking on Browse or else leave the default location. Click Next when ready to continue. The next screen will show a Warning about the network interfaces. The Setup Wizard will install a virtual network adapter that may reset and temporarily disconnect the network connection. Click on Yes to process the installation. The next screen will ask you to confirm the installation. Click on Install to begin the installation of VirtualBox 7.0.8. The installation process will begin and it might take several minutes. Once the installation is done, click on the Finish button to exit the Setup Wizard. Launch the VirtualBox Manager from the Start Menu. Creating Virtual Machine Once the VirtualBox Software is installed properly, you can begin creating your Virtual Machine. Click the New button from the top Menu on the VirtualBox Manager window. This will open the Create Virtual Machine wizard which will let you create and configure your new Virtual Machine with the desired settings. On the Virtual Machine Name and Operating System section, fill in the name, Folder (location to store the Virtual machine files), and select the Ubuntu 22.04 ISO Image (downloaded in the previous section) in the ISO Image option. Click on the Next button to process. On the Unattended Guest OS Install Setup section, you need to enter your username and password in addition to your machine name so that it can be configured automatically during the first boot. Also, check the Guest Additions box to install the default Guest Additions ISO that is downloaded as part of VirtualBox. In the next Hardware section, specify how much of your host machine’s RAM and processors the virtual machine can use. Change the slider position to allocate the correct values. NOTE: For using ROS 2 application, it is recommended to use a minimum of 8 GB RAM and at least 6 CPUs. Next in the Virtual Hard Disk section, specify the size of the hard disk for the virtual machine. For ROS 2, it is recommended around 50 GB as a minimum. Click Next to continue and view a summary of your virtual machine setting. After this click Finish to initialize the machine. You will see a message saying Powering VM up … in the VirtualBox manager and a new desktop Window will appear for your Ubuntu 22.04 Virtual machine’s first boot. On the first boot, it will begin the unattended installation. Once the installation completes, the machine will automatically reboot to complete the installation. Finally, you will be greeted with the Ubuntu log-in screen where you can enter your username and password defined during the previous setup. Install ROS 2 Humble Hawksbill Hang in there!! You are one step away from becoming a ROS 2 developer with your Ubuntu 22.04 VirtualBox Machine setup. To install the latest LTS version of ROS 2, i.e., Humble Hawksbill, follow the steps here. Voila!! I hope you have ROS 2 Humble Running on Ubuntu 22.04 inside a Virtual Machine on Windows Laptop. If you liked the article, please buy me a ☕️ coffee Currently, I am reading The Light We Carry by Michelle Obama. References: https://ubuntu.com/tutorials/how-to-run-ubuntu-desktop-on-a-virtual-machine-using-virtualbox https://trendoceans.com/install-ubuntu-on-virtualbox/ https://adamtheautomator.com/install-virtualbox-on-windows-10/ https://docs.ros.org/en/humble/index.html</summary></entry><entry><title type="html">How To Install ROS 2 in Ubuntu 22.04 On M1 Mac</title><link href="http://localhost:4000/blog/How-To-Install-ROS-2-in-Ubuntu-22-04-On-M1-Mac/" rel="alternate" type="text/html" title="How To Install ROS 2 in Ubuntu 22.04 On M1 Mac" /><published>2023-04-12T00:00:00+05:30</published><updated>2023-04-12T00:00:00+05:30</updated><id>http://localhost:4000/blog/How-To-Install-ROS-2-in-Ubuntu-22-04-On-M1-Mac</id><content type="html" xml:base="http://localhost:4000/blog/How-To-Install-ROS-2-in-Ubuntu-22-04-On-M1-Mac/">&lt;h1 style=&quot;text-align: center;margin-top:20px;margin-bottom-20px;&quot;&gt;How To Install ROS 2 in Ubuntu 22.04 On M1/M2 Mac&lt;/h1&gt;

&lt;!--excerpt.start--&gt;
&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;Congratulations on taking the first step into the fascinating realm of robotics!&lt;br /&gt; 
  In this tutorial, I will walk you through the in-depth steps to install Ubuntu 22.04 with ROS 2 on the Macbook M1/M2 chip using &lt;a href=&quot;https://docs.getutm.app/&quot;&gt; UTM Virtualization software.&lt;/a&gt; &lt;/p&gt;
&lt;!--excerpt.end--&gt;

&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;ROS 2 is supported in MacOS using the Homebrew installation process. Although, in my 7 years as a Roboticist, I have hardly seen anyone using MacOS for Robotics. What I have seen is the use of Virtual Desktops and Dockers with Ubuntu extensively. One of the primary reasons for configuring your development environment in this manner is because robotics software works on ARM-based development kits like &lt;a href=&quot;https://www.nvidia.com/en-us/autonomous-machines/embedded-systems/jetson-agx-xavier/&quot;&gt;Nvidia’s Jetson AGX series&lt;/a&gt;. When utilizing Virtual Desktops on Mac M1, you effectively have the same development environment as your robot&apos;s runtime environment while keeping the M1 chip&apos;s inherent speed performance.&lt;/p&gt;
&lt;p style=&quot;margin: 20px 3rem;&quot;&gt; We now understand why and what we are doing. Let’s dive right in.
    &lt;ol style=&quot; margin: 20px 3rem;&quot;&gt;
      &lt;li&gt; The first step is more of a reminder. The Macbooks with M1/M2 Chip are ARM-based platforms compared to older MacBooks and Windows which are AMD/Intel x86-based platforms.&lt;/li&gt;
      &lt;li&gt;Different virtual desktops are available like Parallels Desktop, Oracle’s Virtual Box, and UTM each having its pros and cons. I would recommend the &lt;a href=&quot;https://www.parallels.com/products/desktop/&quot;&gt;Parallels Desktop paid version&lt;/a&gt; if you are a professional developer. For students or anyone looking for free software, I would recommend &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;Virtual Box&lt;/a&gt; for Windows and &lt;a href=&quot;https://docs.getutm.app/&quot;&gt;UTM&lt;/a&gt; for Macbooks. &lt;/li&gt;
      &lt;li&gt;In this article, we will use free UTM virtualization software. UTM is a full-featured system emulator and virtual machine host for iOS and macOS. It is based on QEMU. In short, it allows you to run Windows, Linux, and more on your Mac, iPhone, and iPad. UTM allows Ubuntu to run with OpenGL, Hardware acceleration providing a highly efficient with near-native speed performance.&lt;/li&gt;
      &lt;li&gt; I am using Macbook Pro with M1 Chip with MacOS 13. You will need about 50GB of free space for your new operating system.
      &lt;/li&gt;
      &lt;li&gt;
        Go to &lt;a href=&quot;https://mac.getutm.app/&quot;&gt;https://mac.getutm.app/&lt;/a&gt;  and click the &lt;code style=&quot;color:orange&quot;&gt; Download&lt;/code&gt; button. A UTM.dmg file will start downloading.
        &lt;img src=&quot;/assets/simg1.png&quot; alt=&quot;article image 1&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;        
      &lt;/li&gt;
      &lt;li&gt;Go to &lt;a href=&quot;https://cdimage.ubuntu.com/jammy/daily-live/current/&quot;&gt; https://cdimage.ubuntu.com/jammy/daily-live/current/&lt;/a&gt; and Download &lt;a href=&quot;https://cdimage.ubuntu.com/jammy/daily-live/current/jammy-desktop-arm64.iso&quot;&gt;64-bit ARM (ARMv8/AArch64) desktop image&lt;/a&gt;. A &quot;.iso&quot; desktop image will start downloading. Make sure you use the &lt;code style=&quot;color:orange&quot;&gt;ARM&lt;/code&gt; image for a Macbook with M1/M2 chip and not an &lt;code style=&quot;color:orange&quot;&gt;AMD&lt;/code&gt; image.
      This step might take time depending on your internet speed.
          &lt;img src=&quot;/assets/simg2.png&quot; alt=&quot;article image 2&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;   
      &lt;/li&gt;
     &lt;li&gt;Double-click on the &lt;code style=&quot;color:orange&quot;&gt;UTM.dmg&lt;/code&gt; file and drag the icon to the Applications folder. 
          &lt;img src=&quot;/assets/simg3.png&quot; alt=&quot;article image 3&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;   
      &lt;/li&gt;
     &lt;li&gt;Search for UTM and Open the UTM app from Launchpad.
          &lt;img src=&quot;/assets/simg4.png&quot; alt=&quot;article image 4&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;   
      &lt;/li&gt;
     &lt;li&gt;Once the app is launched, click &lt;code style=&quot;color:orange&quot;&gt;Create a new Virtual Machine&lt;/code&gt;. 
          &lt;img src=&quot;/assets/simg5.png&quot; alt=&quot;article image 5&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;   
      &lt;/li&gt;
     &lt;li&gt;Use the &lt;code style=&quot;color:orange&quot;&gt;Virtualize&lt;/code&gt; option to simulate the bare metal performance.
          &lt;img src=&quot;/assets/simg6.png&quot; alt=&quot;article image 6&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;   
      &lt;/li&gt;
     &lt;li&gt;Select &lt;code style=&quot;color:orange&quot;&gt;Linux&lt;/code&gt; and on the next screen, you will see Boot options. Click &lt;code style=&quot;color:orange&quot;&gt;Browse&lt;/code&gt; and select the &lt;code style=&quot;color:orange&quot;&gt;.iso&lt;/code&gt; image for Ubuntu 22.04 that you download in the above step.
          &lt;img src=&quot;/assets/simg7.png&quot; alt=&quot;article image 7&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;
          &lt;br /&gt;
          &lt;img src=&quot;/assets/point_11.png&quot; alt=&quot;article image 8&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;              
      &lt;/li&gt;
     &lt;li&gt;Keep pressing the &lt;code style=&quot;color:orange&quot;&gt;Continue&lt;/code&gt; button with default settings till you reach the summary screen.&lt;/li&gt; 
     &lt;li&gt;Tap on the big Play button to boot Ubuntu 22.04
          &lt;img src=&quot;/assets/simg9.png&quot; alt=&quot;article image 9&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;   
      &lt;/li&gt;
     &lt;li&gt;Select &lt;code style=&quot;color:orange&quot;&gt;Try to Install Ubuntu&lt;/code&gt;. This takes a minute and you will see a blank screen. 
          &lt;img src=&quot;/assets/simg11.png&quot; alt=&quot;article image 11&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;   
      &lt;/li&gt;
     &lt;li&gt;Once you see the Ubuntu 22.04 screen, type in &lt;code style=&quot;color:orange&quot;&gt;ubuntu&lt;/code&gt; to login. 
          &lt;img src=&quot;/assets/simg12.png&quot; alt=&quot;article image 12&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;   
      &lt;/li&gt;
     &lt;li&gt;The system will boot with the live image. On the right side, you will see &lt;code style=&quot;color:orange&quot;&gt;Install Ubuntu&lt;/code&gt;. Continue with the standard installation process.  
          &lt;img src=&quot;/assets/simg13.png&quot; alt=&quot;article image 13&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;   
      &lt;/li&gt;            
     &lt;li&gt;Select &lt;code style=&quot;color:orange&quot;&gt;Install Third Party Software&lt;/code&gt; in the following screen. 
          &lt;img src=&quot;/assets/simg14.png&quot; alt=&quot;article image 14&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;   
      &lt;/li&gt;
     &lt;li&gt;Select &lt;code style=&quot;color:orange&quot;&gt;Erase Ubuntu and reinstall&lt;/code&gt; or if you are doing it for the first time, the third option &lt;code style=&quot;color:orange&quot;&gt;Erase disk and install Ubuntu&lt;/code&gt; will be your first one. Choose that. 
          &lt;img src=&quot;/assets/simg15.png&quot; alt=&quot;article image 15&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;   
      &lt;/li&gt;
     &lt;li&gt;Save the username and password. You will need this later for login. 
          &lt;img src=&quot;/assets/simg16.png&quot; alt=&quot;article image 16&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;   
      &lt;/li&gt;
     &lt;li&gt;Continue with installation. This will take time. 
          &lt;img src=&quot;/assets/simg17.png&quot; alt=&quot;article image 17&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;   
      &lt;/li&gt;
     &lt;li&gt;Once Installation is done, You will see an option to restart the screen. Close the dialog box and Power Off the system. 
          &lt;img src=&quot;/assets/simg18.png&quot; alt=&quot;article image 18&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;
          &lt;br /&gt;
          &lt;img src=&quot;/assets/simg19.png&quot; alt=&quot;article image 19&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;              
      &lt;/li&gt;
     &lt;li&gt;Now using the virtual machine Navigation bar, choose Drive Image Options and eject the image file.
          &lt;img src=&quot;/assets/simg20.png&quot; alt=&quot;article image 20&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;
          &lt;br /&gt;
          &lt;img src=&quot;/assets/simg21.png&quot; alt=&quot;article image 21&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;              
      &lt;/li&gt;
     &lt;li&gt;You can restart the VM now by tapping on the Play Button. Now you will wait for 10 seconds to see the login screen of Ubuntu. 
          &lt;img src=&quot;/assets/simg22.png&quot; alt=&quot;article image 22&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;   
      &lt;/li&gt;
     &lt;li&gt;Congratulations! You have Ubuntu 22.04 running on your Macbook. You can log in now using your password.
      &lt;/li&gt;                                             

    &lt;/ol&gt;
  &lt;/p&gt;

&lt;h2 style=&quot;text-align: center;margin-top:20px;margin-bottom-20px;&quot; id=&quot;rosinstallation&quot;&gt;How To Install ROS 2 in Ubuntu 22.04 On M1 Mac&lt;/h2&gt;

&lt;!-- 
  &lt;p style=&quot;text-align: center; margin: auto 3rem;&quot;&gt;Image Source: &lt;a href=&quot;https://spectrum.ieee.org/interview-turtlebot-inventors-tell-us-everything-about-the-robot&quot;&gt;IEEE Spectrum&lt;/a&gt;&lt;/p&gt; --&gt;

&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;Now that we have Ubuntu 22.04 running on our Macbook with M1/M2 Chip, we can install the &lt;a href=&quot;https://docs.ros.org/en/humble/Installation/Ubuntu-Install-Debians.html&quot;&gt;ROS 2 HUMBLE version&lt;/a&gt; by following the steps for Linux Distribution.&lt;/p&gt;
&lt;ol style=&quot; margin: 20px 3rem;&quot;&gt;
     &lt;li&gt;Open Terminal. 
          &lt;img src=&quot;/assets/simg23.png&quot; alt=&quot;article image 23&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;   
      &lt;/li&gt;
     &lt;li&gt;To be able to copy and paste between your Ubuntu and Mac, run the following command in your terminal
           &lt;code style=&quot;display: block;
            width: 90%;
            min-height: 3em;
            overflow-y: auto;
            overflow-x: hidden;
            font-family: monospace;
            border: 1px solid #bbb;
            padding: 0.5em;
            white-space:pre-wrap;&quot;&gt;$ sudo apt install spice-webdavd spice-vdagent&lt;/code&gt; 
      &lt;/li&gt;
     &lt;li&gt;Set locale &lt;br /&gt;
        Make sure you have a locale that supports UTF-8.&lt;br /&gt;
      &lt;code style=&quot;display: block;
            width: 90%;
            min-height: 3em;
            overflow-y: auto;
            overflow-x: hidden;
            font-family: monospace;
            border: 1px solid #bbb;
            padding: 0.5em;
            white-space:pre-wrap;&quot;&gt;$ locale  # check for UTF-8 skip this step if locale is utf-8 already
$ sudo apt update &amp;amp;&amp;amp; sudo apt install locales
$ sudo locale-gen en_US en_US.UTF-8
$ sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8
$ export LANG=en_US.UTF-8
$ locale  # verify settings&lt;/code&gt;
      &lt;/li&gt;
     &lt;li&gt;Setup resources
&lt;code style=&quot;display: block;
            width: 90%;
            min-height: 3em;
            overflow-y: auto;
            overflow-x: hidden;
            font-family: monospace;
            border: 1px solid #bbb;
            padding: 0.5em;
            white-space:pre-wrap;&quot;&gt;$ sudo apt install software-properties-common
$ sudo add-apt-repository universe&lt;/code&gt;
      &lt;/li&gt;
     &lt;li&gt;ROS 2 GPG key with apt.
      &lt;code style=&quot;display: block;
            width: 90%;
            min-height: 3em;
            overflow-y: auto;
            overflow-x: hidden;
            font-family: monospace;
            border: 1px solid #bbb;
            padding: 0.5em;
            white-space:pre-wrap;&quot;&gt;$ sudo apt update &amp;amp;&amp;amp; sudo apt install curl -y
$ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg&lt;/code&gt;
        
      &lt;/li&gt;  
     &lt;li&gt;Add the repository to your sources list.
      &lt;code style=&quot;display: block;
            width: 90%;
            min-height: 3em;
            overflow-y: auto;
            overflow-x: hidden;
            font-family: monospace;
            border: 1px solid #bbb;
            padding: 0.5em;
            white-space:pre-wrap;&quot;&gt;$ echo &quot;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release &amp;amp;&amp;amp; echo$UBUNTU_CODENAME) main&quot; | sudo tee /etc/apt/sources.list.d/ros2.list &amp;gt; /dev/null&lt;/code&gt;

      &lt;/li&gt;  
     &lt;li&gt;Update and Upgrade your packages
      &lt;code style=&quot;display: block;
            width: 90%;
            min-height: 3em;
            overflow-y: auto;
            overflow-x: hidden;
            font-family: monospace;
            border: 1px solid #bbb;
            padding: 0.5em;
            white-space:pre-wrap;&quot;&gt;$ sudo apt update
$ sudo apt upgrade&lt;/code&gt;        
      &lt;/li&gt;
     &lt;li&gt;Install Desktop Full
      &lt;code style=&quot;display: block;
            width: 90%;
            min-height: 3em;
            overflow-y: auto;
            overflow-x: hidden;
            font-family: monospace;
            border: 1px solid #bbb;
            padding: 0.5em;
            white-space:pre-wrap;&quot;&gt;$ sudo apt install ros-humble-desktop-full&lt;/code&gt;
      &lt;/li&gt;  
     &lt;li&gt;Setup environment:
      &lt;code style=&quot;display: block;
            width: 90%;
            min-height: 3em;
            overflow-y: auto;
            overflow-x: hidden;
            font-family: monospace;
            border: 1px solid #bbb;
            padding: 0.5em;
            white-space:pre-wrap;&quot;&gt;$ source /opt/ros/humble/setup.bash&lt;/code&gt;
      &lt;/li&gt;  
     &lt;li&gt;Add this to your bashrc script so that you don’t have to re-run the command every time you open a new terminal.
      &lt;code style=&quot;display: block;
            width: 90%;
            min-height: 3em;
            overflow-y: auto;
            overflow-x: hidden;
            font-family: monospace;
            border: 1px solid #bbb;
            padding: 0.5em;
            white-space:pre-wrap;&quot;&gt;$ echo “source /opt/ros/humble/setup.bash” &amp;gt;&amp;gt; ~/.bashrc&lt;/code&gt;
      &lt;/li&gt;
     &lt;li&gt;To check the installation:
           &lt;code style=&quot;display: block;
            width: 90%;
            min-height: 3em;
            overflow-y: auto;
            overflow-x: hidden;
            font-family: monospace;
            border: 1px solid #bbb;
            padding: 0.5em;
            white-space:pre-wrap;&quot;&gt;$ ros2 run demo_nodes_cpp talker&lt;/code&gt;
      &lt;/li&gt;
      &lt;h3&gt;Another important thing to learn is how to build new ros packages:
      &lt;/h3&gt;

     &lt;li&gt;Go to &lt;a href=&quot;https://docs.ros.org/en/humble/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.html&quot;&gt;https://docs.ros.org/en/humble/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.html.&lt;/a&gt; &lt;br /&gt; We need to install the `colcon` build tool.

            &lt;code style=&quot;display: block;
            width: 90%;
            min-height: 3em;
            overflow-y: auto;
            overflow-x: hidden;
            font-family: monospace;
            border: 1px solid #bbb;
            padding: 0.5em;
            white-space:pre-wrap;&quot;&gt;$ sudo apt install python3-colcon-common-extensions&lt;/code&gt;
      &lt;/li&gt;
      &lt;li&gt;Welcome to creating your first ros workspace.
      &lt;code style=&quot;display: block;
            width: 90%;
            min-height: 3em;
            overflow-y: auto;
            overflow-x: hidden;
            font-family: monospace;
            border: 1px solid #bbb;
            padding: 0.5em;
            white-space:pre-wrap;&quot;&gt;$ mkdir -p ~/ros2_ws/src
$ cd ~/ros2_ws&lt;/code&gt;
      &lt;/li&gt; 
      &lt;li&gt;Since we are doing a clone, we need git also, So install git using
            &lt;code style=&quot;display: block;
            width: 90%;
            min-height: 3em;
            overflow-y: auto;
            overflow-x: hidden;
            font-family: monospace;
            border: 1px solid #bbb;
            padding: 0.5em;
            white-space:pre-wrap;&quot;&gt;$ sudo apt install git&lt;/code&gt;
      &lt;/li&gt;
      &lt;li&gt;Run all the below commands from the ros2_ws folder.
              &lt;code style=&quot;display: block;
            width: 90%;
            min-height: 3em;
            overflow-y: auto;
            overflow-x: hidden;
            font-family: monospace;
            border: 1px solid #bbb;
            padding: 0.5em;
            white-space:pre-wrap;&quot;&gt;$ git clone https://github.com/ros2/examples src/examples -b humble&lt;/code&gt;
      &lt;/li&gt;
      &lt;li&gt;After cloning, you should have the entire code inside your src folder for examples in ros2.
      &lt;/li&gt;
      &lt;li&gt;Now we will build examples of the ros package. In the root of the workspace, run
              &lt;code style=&quot;display: block;
            width: 90%;
            min-height: 3em;
            overflow-y: auto;
            overflow-x: hidden;
            font-family: monospace;
            border: 1px solid #bbb;
            padding: 0.5em;
            white-space:pre-wrap;&quot;&gt;$ colcon build&lt;/code&gt;
      &lt;/li&gt;
      &lt;li&gt;You should have build, install, and log folders.
      &lt;/li&gt;
      &lt;li&gt;You need to source before being able to launch the node. So run
              &lt;code style=&quot;display: block;
            width: 90%;
            min-height: 3em;
            overflow-y: auto;
            overflow-x: hidden;
            font-family: monospace;
            border: 1px solid #bbb;
            padding: 0.5em;
            white-space:pre-wrap;&quot;&gt;$ . install/setup.bash&lt;/code&gt;
      &lt;/li&gt;
      &lt;li&gt;Try a demo&lt;br /&gt;
        With the environment sourced, we can run executables built by colcon. Let’s run a subscriber node from the examples:
              &lt;code style=&quot;display: block;
            width: 90%;
            min-height: 3em;
            overflow-y: auto;
            overflow-x: hidden;
            font-family: monospace;
            border: 1px solid #bbb;
            padding: 0.5em;
            white-space:pre-wrap;&quot;&gt;$ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function&lt;/code&gt;
            &lt;br /&gt;
        In another terminal, let’s run a publisher node (don’t forget to source the setup script):
              &lt;code style=&quot;display: block;
            width: 90%;
            min-height: 3em;
            overflow-y: auto;
            overflow-x: hidden;
            font-family: monospace;
            border: 1px solid #bbb;
            padding: 0.5em;
            white-space:pre-wrap;&quot;&gt;$ ros2 run examples_rclcpp_minimal_publisher publisher_member_function&lt;/code&gt;
            &lt;br /&gt;
        You should see messages from the publisher and subscriber with numbers incrementing.&lt;br /&gt;
          &lt;img src=&quot;/assets/simg24.png&quot; alt=&quot;article image 24&quot; style=&quot;display: block;
          margin-left: auto;
          margin-right: auto;
          width: 45vmax;&quot; /&gt;
        &lt;br /&gt;
        Voila!! You have ROS 2 Humble Running on Ubuntu 22.04 inside a Virtual Machine on Macbook.
      &lt;/li&gt;                                             
  &lt;/ol&gt;

&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;If you liked the article, please buy me a &lt;a style=&quot;
                    text-decoration:none;
                    display: inline-block;
                    outline: 0;
                    cursor: pointer;
                    text-align: center;
                    border: 0;
                    padding: 7px 16px;
                    min-height: 36px;
                    min-width: 36px;
                    color: #ffffff;
                    background: #11999e;
                    border-radius: 4px;
                    font-weight: 500;
                    font-size: 18px;
                    box-shadow: rgba(0, 0, 0, 0.05) 0px 1px 0px 0px, rgba(0, 0, 0, 0.2) 0px -1px 0px 0px inset;
                    :hover {
                        background: #006e52;
                    }
                &quot; href=&quot;https://www.buymeacoffee.com/roboticsspace&quot;&gt;☕️ coffee&lt;/a&gt;&lt;/p&gt;

&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;References:&lt;/p&gt;
&lt;ul style=&quot; margin: 20px 3rem;&quot;&gt;
 &lt;li&gt;
 &lt;a href=&quot;https://www.nvidia.com/&quot;&gt;
 https://www.nvidia.com/
 &lt;/a&gt;
 &lt;/li&gt;
  &lt;li&gt;
  &lt;a href=&quot;https://docs.ros.org/en/humble/index.html&quot;&gt;
https://docs.ros.org/en/humble/index.html
&lt;/a&gt;
 &lt;/li&gt;
  &lt;li&gt;
  &lt;a href=&quot;https://mac.getutm.app/&quot;&gt;
https://mac.getutm.app/
&lt;/a&gt;
 &lt;/li&gt;
  &lt;li&gt;
  &lt;a href=&quot;https://www.parallels.com/&quot;&gt;
 https://www.parallels.com/&lt;/a&gt;
 &lt;/li&gt;
  &lt;li&gt;
 &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;https://www.virtualbox.org/&lt;/a&gt;
 &lt;/li&gt;
 &lt;/ul&gt;</content><author><name>Apoorva Gupta</name></author><category term="Blog" /><category term="Post Formats" /><category term="readability" /><category term="standard" /><summary type="html">How To Install ROS 2 in Ubuntu 22.04 On M1/M2 Mac Congratulations on taking the first step into the fascinating realm of robotics! In this tutorial, I will walk you through the in-depth steps to install Ubuntu 22.04 with ROS 2 on the Macbook M1/M2 chip using UTM Virtualization software. ROS 2 is supported in MacOS using the Homebrew installation process. Although, in my 7 years as a Roboticist, I have hardly seen anyone using MacOS for Robotics. What I have seen is the use of Virtual Desktops and Dockers with Ubuntu extensively. One of the primary reasons for configuring your development environment in this manner is because robotics software works on ARM-based development kits like Nvidia’s Jetson AGX series. When utilizing Virtual Desktops on Mac M1, you effectively have the same development environment as your robot&apos;s runtime environment while keeping the M1 chip&apos;s inherent speed performance. We now understand why and what we are doing. Let’s dive right in. The first step is more of a reminder. The Macbooks with M1/M2 Chip are ARM-based platforms compared to older MacBooks and Windows which are AMD/Intel x86-based platforms. Different virtual desktops are available like Parallels Desktop, Oracle’s Virtual Box, and UTM each having its pros and cons. I would recommend the Parallels Desktop paid version if you are a professional developer. For students or anyone looking for free software, I would recommend Virtual Box for Windows and UTM for Macbooks. In this article, we will use free UTM virtualization software. UTM is a full-featured system emulator and virtual machine host for iOS and macOS. It is based on QEMU. In short, it allows you to run Windows, Linux, and more on your Mac, iPhone, and iPad. UTM allows Ubuntu to run with OpenGL, Hardware acceleration providing a highly efficient with near-native speed performance. I am using Macbook Pro with M1 Chip with MacOS 13. You will need about 50GB of free space for your new operating system. Go to https://mac.getutm.app/ and click the Download button. A UTM.dmg file will start downloading. Go to https://cdimage.ubuntu.com/jammy/daily-live/current/ and Download 64-bit ARM (ARMv8/AArch64) desktop image. A &quot;.iso&quot; desktop image will start downloading. Make sure you use the ARM image for a Macbook with M1/M2 chip and not an AMD image. This step might take time depending on your internet speed. Double-click on the UTM.dmg file and drag the icon to the Applications folder. Search for UTM and Open the UTM app from Launchpad. Once the app is launched, click Create a new Virtual Machine. Use the Virtualize option to simulate the bare metal performance. Select Linux and on the next screen, you will see Boot options. Click Browse and select the .iso image for Ubuntu 22.04 that you download in the above step. Keep pressing the Continue button with default settings till you reach the summary screen. Tap on the big Play button to boot Ubuntu 22.04 Select Try to Install Ubuntu. This takes a minute and you will see a blank screen. Once you see the Ubuntu 22.04 screen, type in ubuntu to login. The system will boot with the live image. On the right side, you will see Install Ubuntu. Continue with the standard installation process. Select Install Third Party Software in the following screen. Select Erase Ubuntu and reinstall or if you are doing it for the first time, the third option Erase disk and install Ubuntu will be your first one. Choose that. Save the username and password. You will need this later for login. Continue with installation. This will take time. Once Installation is done, You will see an option to restart the screen. Close the dialog box and Power Off the system. Now using the virtual machine Navigation bar, choose Drive Image Options and eject the image file. You can restart the VM now by tapping on the Play Button. Now you will wait for 10 seconds to see the login screen of Ubuntu. Congratulations! You have Ubuntu 22.04 running on your Macbook. You can log in now using your password. How To Install ROS 2 in Ubuntu 22.04 On M1 Mac Now that we have Ubuntu 22.04 running on our Macbook with M1/M2 Chip, we can install the ROS 2 HUMBLE version by following the steps for Linux Distribution. Open Terminal. To be able to copy and paste between your Ubuntu and Mac, run the following command in your terminal $ sudo apt install spice-webdavd spice-vdagent Set locale Make sure you have a locale that supports UTF-8. $ locale # check for UTF-8 skip this step if locale is utf-8 already $ sudo apt update &amp;amp;&amp;amp; sudo apt install locales $ sudo locale-gen en_US en_US.UTF-8 $ sudo update-locale LC_ALL=en_US.UTF-8 LANG=en_US.UTF-8 $ export LANG=en_US.UTF-8 $ locale # verify settings Setup resources $ sudo apt install software-properties-common $ sudo add-apt-repository universe ROS 2 GPG key with apt. $ sudo apt update &amp;amp;&amp;amp; sudo apt install curl -y $ sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg Add the repository to your sources list. $ echo &quot;deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(. /etc/os-release &amp;amp;&amp;amp; echo$UBUNTU_CODENAME) main&quot; | sudo tee /etc/apt/sources.list.d/ros2.list &amp;gt; /dev/null Update and Upgrade your packages $ sudo apt update $ sudo apt upgrade Install Desktop Full $ sudo apt install ros-humble-desktop-full Setup environment: $ source /opt/ros/humble/setup.bash Add this to your bashrc script so that you don’t have to re-run the command every time you open a new terminal. $ echo “source /opt/ros/humble/setup.bash” &amp;gt;&amp;gt; ~/.bashrc To check the installation: $ ros2 run demo_nodes_cpp talker Another important thing to learn is how to build new ros packages: Go to https://docs.ros.org/en/humble/Tutorials/Beginner-Client-Libraries/Colcon-Tutorial.html. We need to install the `colcon` build tool. $ sudo apt install python3-colcon-common-extensions Welcome to creating your first ros workspace. $ mkdir -p ~/ros2_ws/src $ cd ~/ros2_ws Since we are doing a clone, we need git also, So install git using $ sudo apt install git Run all the below commands from the ros2_ws folder. $ git clone https://github.com/ros2/examples src/examples -b humble After cloning, you should have the entire code inside your src folder for examples in ros2. Now we will build examples of the ros package. In the root of the workspace, run $ colcon build You should have build, install, and log folders. You need to source before being able to launch the node. So run $ . install/setup.bash Try a demo With the environment sourced, we can run executables built by colcon. Let’s run a subscriber node from the examples: $ ros2 run examples_rclcpp_minimal_subscriber subscriber_member_function In another terminal, let’s run a publisher node (don’t forget to source the setup script): $ ros2 run examples_rclcpp_minimal_publisher publisher_member_function You should see messages from the publisher and subscriber with numbers incrementing. Voila!! You have ROS 2 Humble Running on Ubuntu 22.04 inside a Virtual Machine on Macbook. If you liked the article, please buy me a ☕️ coffee References: https://www.nvidia.com/ https://docs.ros.org/en/humble/index.html https://mac.getutm.app/ https://www.parallels.com/ https://www.virtualbox.org/</summary></entry><entry><title type="html">The History of Turtle Robots</title><link href="http://localhost:4000/blog/The-history-of-turtle-robots/" rel="alternate" type="text/html" title="The History of Turtle Robots" /><published>2023-01-25T00:00:00+05:30</published><updated>2023-01-25T00:00:00+05:30</updated><id>http://localhost:4000/blog/The-history-of-turtle-robots</id><content type="html" xml:base="http://localhost:4000/blog/The-history-of-turtle-robots/">&lt;h1 style=&quot;text-align: center;margin-top:20px;margin-bottom-20px;&quot;&gt;The History of Turtle Bots&lt;/h1&gt;

&lt;!--excerpt.start--&gt;
&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;With the title of this article being “Turtle Robots”, you might be thinking to yourself, “Hmm, well I know about TurtleBots”, assuming you are into Robotics. Well, the infamous TurtleBots falls under the category of Turtle Robots, but that’s not all.&lt;/p&gt;
&lt;!--excerpt.end--&gt;

&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;The idea of TurtleBot came from two roboticists, Tully Foote and Melonee Wise, when they were working at Willow Garage in 2010, interestingly, where the Robot Operating System (ROS) was developed. Behind every idea is a person trying to solve a problem. The problem with ROS at the time was that ROS only ran on big, fancy and expensive robots. When Melonee got her hands on Kinect and wired it with iRobot Create, that gave birth to the first generation TurtleBot.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/rimg1.png&quot; alt=&quot;turtle robot image1&quot; style=&quot;display: block;   margin-left: auto;   margin-right: auto;   width: 50%;&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;text-align: center; margin: auto 3rem;&quot;&gt;Image Source: &lt;a href=&quot;https://spectrum.ieee.org/interview-turtlebot-inventors-tell-us-everything-about-the-robot&quot;&gt;IEEE Spectrum&lt;/a&gt;&lt;/p&gt;

&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;TurtleBot was a low-cost, personal robotic kit that had a completely open source SDK and can be used to build a robot that can drive around your house, as well as research SLAM or Path Planning algorithms. The possibilities were endless. No doubt, TurtleBot became a massive hit and was being used by about 15 universities to teach undergrad and graduate students.&lt;/p&gt;

&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;The second generation TurtleBots, called TurtleBot2, consists of a Yujin Kobuki base, a 2,200mAh battery pack, a Kinect sensor, an Asus 1215N laptop with a dual core processor, fast charger, charging dock, and a hardware mounting kit attaching everything together and adding future sensors. It was released in October 2012, costing $1500.&lt;/p&gt;

&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;The goal for third generation TurtleBots, called TurtleBot3, released in May 2017 in collaboration between Open Robotics and ROBOTIS, was to dramatically reduce the size of the platform and lower the price, without having to sacrifice its functionality and quality, while at the same time offering expandability. The latest generation of TurtleBots, called TurtleBot4, comes with ROS2 pre-installed and is developed by Clearpath Robotics. It is priced at $1195 and $1899. As new models of iRobot have been released over the years, interestingly, TurtleBot4 is equipped with iRobot Create3 mobile base.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/rimg2.png&quot; alt=&quot;turtle robot image1&quot; style=&quot;display: block;   margin-left: auto;   margin-right: auto;   width: 50%;&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;text-align: center; margin: auto 3rem;&quot;&gt;Image Source: &lt;a href=&quot;https://www.turtlebot.com/&quot;&gt;Turtlebot.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;!-- Image Source: [Turtlebot.com](https://www.turtlebot.com/ &quot;Title&quot;) --&gt;&lt;/p&gt;

&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;The big question is why this small, affordable robot, primarily used for teaching robotics, was named with the word “turtle” in it. Well, as Melonee said in an interview, “Everything in ROS is turtles”. The TurtleBot actually came from Turtlesim and the intent behind Turtlesim was to teach ROS and ROS Packages. Turtlesim is a simulator where a turtle-like robot can be moved around and teleported to a particular location. Now, all the baby-boomers and early-millennials might find this all too familiar. Remember the Logo, an educational programming language widely known for turtle graphics? Actually, the turtlesim commands were inspired and similar to command structures as Logo Turtles. Logo was designed in 1967 by Wally Feurzeig, Seymour Papert, and Cynthia Solomon, but there were no physical turtle robots at that time.&lt;/p&gt;

&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;In the late 1940s, a researcher named William Grey Walter worked on small, mobile robots, named Elmer and Elsie. These robots used analog circuits for thinking, were three-wheeled and had the ability to go to the charging station. The robots had a strong resemblance to Tortoises (or turtles) due to their shape and slow movement. Here is a sneak peak: Grey Walter’s tortoises&lt;/p&gt;

&lt;div style=&quot;display:block;margin-left: 50px;
  margin-right: auto;&quot;&gt;
  &lt;img src=&quot;/assets/rimg3.png&quot; alt=&quot;turtle robot image1&quot; style=&quot;display:inline-block;
  float:center;
  margin-right:10px;
  width: 30%;&quot; /&gt;
  &lt;img src=&quot;/assets/rimg4.jpeg&quot; alt=&quot;turtle robot image1&quot; style=&quot;display:inline-block;
  margin-left: auto;
  margin-right: auto;
  width: 30%;&quot; /&gt;
&lt;/div&gt;
&lt;p style=&quot;text-align: center;margin: auto 3rem;&quot;&gt;Image Source: &lt;a href=&quot;http://www.theoldrobots.com/&quot;&gt;oldrobots.com&lt;/a&gt;&lt;/p&gt;

&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;When Logo programming came, a researcher at MIT, named Marvin Minsky, took the design of a three-wheeled pen robot from Tom Callahan, and the rest was pretty much a DIY job, using a canister and a pen in the middle so that the robot could draw its path, as well as a “tail” for stability and undercarriage viewability. This robot was eventually known as a “Yellow Turtle” and was mainly used by children at school as a way of programming robots to draw or to explore an environment.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/rimg5.png&quot; alt=&quot;turtle robot image1&quot; style=&quot;display: block;   margin-left: auto;   margin-right: auto;   width: 50%;&quot; /&gt;
    &lt;img src=&quot;/assets/rimg6.png&quot; alt=&quot;turtle robot image1&quot; style=&quot;display: block;   margin-left: auto;   margin-right: auto;   width: 50%;&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;text-align: center;margin: auto 3rem;&quot;&gt;Image Source: &lt;a href=&quot;http://cyberneticzoo.com/cyberneticanimals/1969-the-logo-turtle-seymour-papert-marvin-minsky-et-al-american/&quot;&gt;Cyberneticzoo.com&lt;/a&gt;&lt;/p&gt;

&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;In 1971, Mike Peterson, who was a MIT Lab Consultant, introduced the first Logo-controlled turtle robot and is also the person credited to use the term “turtle”. This was just the beginning of the turtle robots. What followed was a series of new and better turtle robots. The very next year, turtle robots went commercial when Bolt, Beranek and Newman (BBN)’s Paul Wexelblat built the first wireless turtle robot named “Irving”. In 1974-76, Radia Perlman created a turtle robot that could be controlled with a “button box”.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/rimg7.png&quot; alt=&quot;turtle robot image1&quot; style=&quot;display: block;   margin-left: auto;   margin-right: auto;   width: 50%;&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;text-align: center;margin: auto 3rem;&quot;&gt;Image Source: &lt;a href=&quot;http://cyberneticzoo.com/cyberneticanimals/1969-the-logo-turtle-seymour-papert-marvin-minsky-et-al-american/&quot;&gt;Cyberneticzoo.com&lt;/a&gt;&lt;/p&gt;

&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;The question was how long sci-fi could have stayed away from the impact of these turtle robots. The answer was not for long, as the first Star Wars film came out in 1977 and some people say that the small black MSE-6 mouse droid was definitely influenced by turtle robots.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/rimg8.gif&quot; alt=&quot;turtle robot image1&quot; style=&quot;display: block;   margin-left: auto;   margin-right: auto;   width: 50%;&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;text-align: center;margin: auto 3rem;&quot;&gt;Image Source: &lt;a href=&quot; https://www.youtube.com/watch?v=cLqNmMH4hsg&quot;&gt;Youtube.com&lt;/a&gt;&lt;/p&gt;

&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;From 1988 to 2011, Valiant Technology, a company I could find on hrefedIn, built the Valiant Turtle Robot, which could be connected to an Apple IIe computer and could be programmed in Logo. This robot was mostly used in schools for teaching coding to kids. The Valiant Turtle had a pen in the center with an up/down mechanism and could draw any pattern on paper.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/rimg9.png&quot; alt=&quot;turtle robot image1&quot; style=&quot;display: block;   margin-left: auto;   margin-right: auto;   width: 50%;&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;text-align: center;margin: auto 3rem;&quot;&gt;Image Source: &lt;a href=&quot; http://www.theoldrobots.com/turtle5.html&quot;&gt;oldrobots.com&lt;/a&gt;&lt;/p&gt;

&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;Recently, when I talked to my 7-year old nephew, who knows I am a Roboticist, he couldn’t stop himself from talking about his Lego robotics kit. Lego isn’t as new to the game as one might think. In 1998, Papert (Logo’s founder) collaborated with Lego and the result was the Lego Mindstorms series of robotics kits priced at $199, which would be about $400 in 2023. Certainly, at some point, someone had to cross the Atlantic and so turtle robots went international. Denning International was a Boston-based turtle robots company, but was the trading name for the private Australian company, Branch &amp;amp; Associates Pty Ltd, (B&amp;amp;A) although Denning International got some bad press in its day.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/rimg10.png&quot; alt=&quot;turtle robot image1&quot; style=&quot;display: block;     margin-left: auto;     margin-right: auto;     width: 50%;&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;text-align: center;margin: auto 3rem;&quot;&gt;Image Source: &lt;a href=&quot;https://apps.dtic.mil/sti/pdfs/ADA422581.pdf&quot;&gt;If Our Robots Are So Smart, Why Aren’t We All Rich?&lt;/a&gt;&lt;/p&gt;

&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;The other robots launched in this period were ‘Turtle Tot Robot’ By Flexible Systems, ‘Tasman Turtle’ and ‘Terrapin Turtle’ Robot by Terrapin Inc.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/rimg11.png&quot; alt=&quot;turtle robot image1&quot; style=&quot;display: block;   margin-left: auto;   margin-right: auto;   width: 50%;&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;text-align: center;margin: auto 3rem;&quot;&gt;Image Source: &lt;a href=&quot; http://www.theoldrobots.com/turtle1.html&quot;&gt;oldrobots.com&lt;/a&gt;&lt;/p&gt;

&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;There were also some cool advertisements in the past.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/rimg12.jpeg&quot; alt=&quot;turtle robot image1&quot; style=&quot;display: block;   margin-left: auto;   margin-right: auto;   width: 50%;&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;text-align: center;margin: auto 3rem;&quot;&gt;Image Source: &lt;a href=&quot; http://www.theoldrobots.com/turtle4.html&quot;&gt;oldrobots.com&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/rimg13.png&quot; alt=&quot;turtle robot image1&quot; style=&quot;display: block;   margin-left: auto;   margin-right: auto;   width: 50%;&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;text-align: center;margin: auto 3rem;&quot;&gt;Image Source: &lt;a href=&quot; http://www.theoldrobots.com/turtle3.html&quot;&gt;oldrobots.com&lt;/a&gt;&lt;/p&gt;

&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;Even today, people are using the concept of turtle robots. Some of them are fighting in robot wars and built a turtle robot, calling them Terror Turtles, for not just one, but at least for four series.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/rimg14.png&quot; alt=&quot;turtle robot image1&quot; style=&quot;display: block;   margin-left: auto;   margin-right: auto;   width: 50%;&quot; /&gt;&lt;/p&gt;

&lt;p style=&quot;text-align: center;margin: auto 3rem;&quot;&gt;Image Source: &lt;a href=&quot;https://robotwars.fandom.com/wiki/Terror_Turtle&quot; target=&quot;_top&quot;&gt;robotwars.fandom.com&lt;/a&gt;&lt;/p&gt;

&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;There exists instructables, like Open Source Turtle Robot, and even Arduino-based robot turtle kits and Lego Robotics kits are still part of early STEM education.Nonetheless, robots and turtles are very much intertwined. For over 80 years, the underlying thought process for the turtle robots has been the same, an open source, free-to-build-on platform, to teach, and give access to children to learn robotics.&lt;/p&gt;

&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;As for the next generation TurtleBots, I think it is time to take them outdoors, on the sidewalks, in the urban environment. The space of indoor robotics has had massive development in the last decade and today, it is a relatively easier problem to solve. Whereas the robots for curbside, or last-mile delivery, even self-driving cars, are still facing major challenges, especially during extreme weather conditions and drastically dynamic environments with new edge cases and poor sensor readings. We are secretly waiting for the TurtleBots 5.0 to chill at the Campus Quads with its 3D Lidar and perhaps GPS.&lt;/p&gt;</content><author><name>Apoorva Gupta</name></author><category term="Blog" /><category term="Post Formats" /><category term="readability" /><category term="standard" /><summary type="html">The History of Turtle Bots With the title of this article being “Turtle Robots”, you might be thinking to yourself, “Hmm, well I know about TurtleBots”, assuming you are into Robotics. Well, the infamous TurtleBots falls under the category of Turtle Robots, but that’s not all. The idea of TurtleBot came from two roboticists, Tully Foote and Melonee Wise, when they were working at Willow Garage in 2010, interestingly, where the Robot Operating System (ROS) was developed. Behind every idea is a person trying to solve a problem. The problem with ROS at the time was that ROS only ran on big, fancy and expensive robots. When Melonee got her hands on Kinect and wired it with iRobot Create, that gave birth to the first generation TurtleBot. Image Source: IEEE Spectrum TurtleBot was a low-cost, personal robotic kit that had a completely open source SDK and can be used to build a robot that can drive around your house, as well as research SLAM or Path Planning algorithms. The possibilities were endless. No doubt, TurtleBot became a massive hit and was being used by about 15 universities to teach undergrad and graduate students. The second generation TurtleBots, called TurtleBot2, consists of a Yujin Kobuki base, a 2,200mAh battery pack, a Kinect sensor, an Asus 1215N laptop with a dual core processor, fast charger, charging dock, and a hardware mounting kit attaching everything together and adding future sensors. It was released in October 2012, costing $1500. The goal for third generation TurtleBots, called TurtleBot3, released in May 2017 in collaboration between Open Robotics and ROBOTIS, was to dramatically reduce the size of the platform and lower the price, without having to sacrifice its functionality and quality, while at the same time offering expandability. The latest generation of TurtleBots, called TurtleBot4, comes with ROS2 pre-installed and is developed by Clearpath Robotics. It is priced at $1195 and $1899. As new models of iRobot have been released over the years, interestingly, TurtleBot4 is equipped with iRobot Create3 mobile base. Image Source: Turtlebot.com The big question is why this small, affordable robot, primarily used for teaching robotics, was named with the word “turtle” in it. Well, as Melonee said in an interview, “Everything in ROS is turtles”. The TurtleBot actually came from Turtlesim and the intent behind Turtlesim was to teach ROS and ROS Packages. Turtlesim is a simulator where a turtle-like robot can be moved around and teleported to a particular location. Now, all the baby-boomers and early-millennials might find this all too familiar. Remember the Logo, an educational programming language widely known for turtle graphics? Actually, the turtlesim commands were inspired and similar to command structures as Logo Turtles. Logo was designed in 1967 by Wally Feurzeig, Seymour Papert, and Cynthia Solomon, but there were no physical turtle robots at that time. In the late 1940s, a researcher named William Grey Walter worked on small, mobile robots, named Elmer and Elsie. These robots used analog circuits for thinking, were three-wheeled and had the ability to go to the charging station. The robots had a strong resemblance to Tortoises (or turtles) due to their shape and slow movement. Here is a sneak peak: Grey Walter’s tortoises Image Source: oldrobots.com When Logo programming came, a researcher at MIT, named Marvin Minsky, took the design of a three-wheeled pen robot from Tom Callahan, and the rest was pretty much a DIY job, using a canister and a pen in the middle so that the robot could draw its path, as well as a “tail” for stability and undercarriage viewability. This robot was eventually known as a “Yellow Turtle” and was mainly used by children at school as a way of programming robots to draw or to explore an environment. Image Source: Cyberneticzoo.com In 1971, Mike Peterson, who was a MIT Lab Consultant, introduced the first Logo-controlled turtle robot and is also the person credited to use the term “turtle”. This was just the beginning of the turtle robots. What followed was a series of new and better turtle robots. The very next year, turtle robots went commercial when Bolt, Beranek and Newman (BBN)’s Paul Wexelblat built the first wireless turtle robot named “Irving”. In 1974-76, Radia Perlman created a turtle robot that could be controlled with a “button box”. Image Source: Cyberneticzoo.com The question was how long sci-fi could have stayed away from the impact of these turtle robots. The answer was not for long, as the first Star Wars film came out in 1977 and some people say that the small black MSE-6 mouse droid was definitely influenced by turtle robots. Image Source: Youtube.com From 1988 to 2011, Valiant Technology, a company I could find on hrefedIn, built the Valiant Turtle Robot, which could be connected to an Apple IIe computer and could be programmed in Logo. This robot was mostly used in schools for teaching coding to kids. The Valiant Turtle had a pen in the center with an up/down mechanism and could draw any pattern on paper. Image Source: oldrobots.com Recently, when I talked to my 7-year old nephew, who knows I am a Roboticist, he couldn’t stop himself from talking about his Lego robotics kit. Lego isn’t as new to the game as one might think. In 1998, Papert (Logo’s founder) collaborated with Lego and the result was the Lego Mindstorms series of robotics kits priced at $199, which would be about $400 in 2023. Certainly, at some point, someone had to cross the Atlantic and so turtle robots went international. Denning International was a Boston-based turtle robots company, but was the trading name for the private Australian company, Branch &amp;amp; Associates Pty Ltd, (B&amp;amp;A) although Denning International got some bad press in its day. Image Source: If Our Robots Are So Smart, Why Aren’t We All Rich? The other robots launched in this period were ‘Turtle Tot Robot’ By Flexible Systems, ‘Tasman Turtle’ and ‘Terrapin Turtle’ Robot by Terrapin Inc. Image Source: oldrobots.com There were also some cool advertisements in the past. Image Source: oldrobots.com Image Source: oldrobots.com Even today, people are using the concept of turtle robots. Some of them are fighting in robot wars and built a turtle robot, calling them Terror Turtles, for not just one, but at least for four series. Image Source: robotwars.fandom.com There exists instructables, like Open Source Turtle Robot, and even Arduino-based robot turtle kits and Lego Robotics kits are still part of early STEM education.Nonetheless, robots and turtles are very much intertwined. For over 80 years, the underlying thought process for the turtle robots has been the same, an open source, free-to-build-on platform, to teach, and give access to children to learn robotics. As for the next generation TurtleBots, I think it is time to take them outdoors, on the sidewalks, in the urban environment. The space of indoor robotics has had massive development in the last decade and today, it is a relatively easier problem to solve. Whereas the robots for curbside, or last-mile delivery, even self-driving cars, are still facing major challenges, especially during extreme weather conditions and drastically dynamic environments with new edge cases and poor sensor readings. We are secretly waiting for the TurtleBots 5.0 to chill at the Campus Quads with its 3D Lidar and perhaps GPS.</summary></entry><entry><title type="html">Robotics without ROS</title><link href="http://localhost:4000/blog/Robotics-without-ROS/" rel="alternate" type="text/html" title="Robotics without ROS" /><published>2023-01-24T00:00:00+05:30</published><updated>2023-01-24T00:00:00+05:30</updated><id>http://localhost:4000/blog/Robotics-without-ROS</id><content type="html" xml:base="http://localhost:4000/blog/Robotics-without-ROS/">&lt;h1 style=&quot;text-align: center;margin-top:20px;margin-bottom-20px;&quot;&gt;Robotics without ROS&lt;/h1&gt;
&lt;!--excerpt.start--&gt;

&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;On the first day at my first job fresh out of grad school, I was informed that “This vacuum bot doesn’t use ROS” and my mind was blown. This revelation was not so much shocking as it was enlightening. During my time in graduate school studying Robotics Engineering, I was heavily encouraged or even pressurized to learn ROS. However, this experience showed me that not all companies and projects rely on it.&lt;/p&gt;
&lt;!--excerpt.end--&gt;

&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;Robot Operating System (ROS) is a popular open-source framework for robotics software development. It provides a set of tools and libraries for building, deploying, and running robots, and has become a standard in the robotics community. However, ROS is not the only option for building robotics systems.&lt;/p&gt;

&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;In this blog post, we will explore some alternative options for robotics development that do not rely on ROS.&lt;/p&gt;

&lt;ol style=&quot; margin: 20px 3rem;&quot;&gt;
&lt;li&gt; Python-based frameworks: Python is a popular programming language for robotics, and there are several frameworks available for building robots without ROS. Some examples include:
  &lt;ul&gt;
    &lt;li&gt;PyRobot: PyRobot is a lightweight, open-source framework for building robots using Python. It provides a set of tools for controlling robots, including a robot simulator and a control library.&lt;/li&gt;
    &lt;li&gt;RobotPy: RobotPy is a Python-based framework for building robots for the FIRST Robotics Competition. It provides a set of libraries for controlling motors, sensors, and other hardware.&lt;/li&gt;
    &lt;li&gt;pyControl: pyControl is a framework for building robots using Python and the Raspberry Pi. It provides a set of libraries for controlling motors, sensors, and other hardware.&lt;/li&gt;
  &lt;/ul&gt;
  &lt;/li&gt;
&lt;li&gt;Hardware-specific frameworks: Some robot manufacturers provide their own frameworks for building robots without ROS. These frameworks are often specific to the manufacturer&apos;s hardware and may not be compatible with other robots. Examples include
  &lt;ul&gt;
    &lt;li&gt;Lego Mindstorms EV3: The Lego Mindstorms EV3 is a popular robotics kit for building robots, and it comes with its own software for programming the robots.&lt;/li&gt;
    &lt;li&gt;Arduino: Arduino is an open-source microcontroller platform that can be used for building robots without ROS. It provides a set of libraries for controlling motors, sensors, and other hardware.&lt;/li&gt;
  &lt;/ul&gt;
  &lt;/li&gt;
&lt;li&gt;Middleware frameworks: Middleware frameworks provide a layer of abstraction between the robot&apos;s hardware and the software that controls it. These frameworks can be used to build robots without ROS. Examples include:
  &lt;ul&gt;
  &lt;li&gt;YARP: The Yet Another Robot Platform (YARP) is an open-source middleware framework for building robots. It provides a set of libraries for controlling motors, sensors, and other hardware, and it can be used with a variety of programming languages.&lt;/li&gt;
  &lt;li&gt;OROCOS: The Open Real-time Control System (OROCOS) is an open-source middleware framework for building robots. It provides a set of libraries for controlling motors, sensors, and other hardware, and it can be used with a variety of programming languages.&lt;/li&gt;
  &lt;/ul&gt;
  &lt;/li&gt;
  &lt;/ol&gt;

&lt;p style=&quot; margin: 20px 3rem;&quot;&gt;Most of the alternative options mentioned are open source libraries. Interestingly, there still exists one more, the most basic way to build robots. With some experience in path planning, sensor fusion, control systems and some low-level firmware communication with robot’s hardware, we can create a robot that can navigate in a dynamic environment avoiding obstacles. By not using ROS, a project can have more control over the specific functionality it uses and can be tailored to the specific needs of the application. I recently heard about a company called Mujin that has succeeded worldwide without using ROS. Even though I use ROS extensively, the possibility of Robotics without ROS is not just based on theory, but rather rooted in practicality.&lt;/p&gt;</content><author><name>Apoorva Gupta</name></author><category term="Blog" /><category term="Post Formats" /><category term="readability" /><category term="standard" /><summary type="html">Robotics without ROS On the first day at my first job fresh out of grad school, I was informed that “This vacuum bot doesn’t use ROS” and my mind was blown. This revelation was not so much shocking as it was enlightening. During my time in graduate school studying Robotics Engineering, I was heavily encouraged or even pressurized to learn ROS. However, this experience showed me that not all companies and projects rely on it. Robot Operating System (ROS) is a popular open-source framework for robotics software development. It provides a set of tools and libraries for building, deploying, and running robots, and has become a standard in the robotics community. However, ROS is not the only option for building robotics systems. In this blog post, we will explore some alternative options for robotics development that do not rely on ROS. Python-based frameworks: Python is a popular programming language for robotics, and there are several frameworks available for building robots without ROS. Some examples include: PyRobot: PyRobot is a lightweight, open-source framework for building robots using Python. It provides a set of tools for controlling robots, including a robot simulator and a control library. RobotPy: RobotPy is a Python-based framework for building robots for the FIRST Robotics Competition. It provides a set of libraries for controlling motors, sensors, and other hardware. pyControl: pyControl is a framework for building robots using Python and the Raspberry Pi. It provides a set of libraries for controlling motors, sensors, and other hardware. Hardware-specific frameworks: Some robot manufacturers provide their own frameworks for building robots without ROS. These frameworks are often specific to the manufacturer&apos;s hardware and may not be compatible with other robots. Examples include Lego Mindstorms EV3: The Lego Mindstorms EV3 is a popular robotics kit for building robots, and it comes with its own software for programming the robots. Arduino: Arduino is an open-source microcontroller platform that can be used for building robots without ROS. It provides a set of libraries for controlling motors, sensors, and other hardware. Middleware frameworks: Middleware frameworks provide a layer of abstraction between the robot&apos;s hardware and the software that controls it. These frameworks can be used to build robots without ROS. Examples include: YARP: The Yet Another Robot Platform (YARP) is an open-source middleware framework for building robots. It provides a set of libraries for controlling motors, sensors, and other hardware, and it can be used with a variety of programming languages. OROCOS: The Open Real-time Control System (OROCOS) is an open-source middleware framework for building robots. It provides a set of libraries for controlling motors, sensors, and other hardware, and it can be used with a variety of programming languages. Most of the alternative options mentioned are open source libraries. Interestingly, there still exists one more, the most basic way to build robots. With some experience in path planning, sensor fusion, control systems and some low-level firmware communication with robot’s hardware, we can create a robot that can navigate in a dynamic environment avoiding obstacles. By not using ROS, a project can have more control over the specific functionality it uses and can be tailored to the specific needs of the application. I recently heard about a company called Mujin that has succeeded worldwide without using ROS. Even though I use ROS extensively, the possibility of Robotics without ROS is not just based on theory, but rather rooted in practicality.</summary></entry></feed>